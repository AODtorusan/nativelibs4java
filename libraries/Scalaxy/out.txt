[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for com.nativelibs4java:scalace:jar:0.3-SNAPSHOT
[WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-source-plugin is missing. @ com.nativelibs4java:nativelibs4java-parent:1.7-SNAPSHOT, /Users/ochafik/github/nativelibs4java/libraries/pom.xml, line 153, column 12
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Scalace 0.3-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.4.1:clean (default-clean) @ scalace ---
[INFO] Deleting /Users/ochafik/github/nativelibs4java/libraries/Scalace/target
[INFO] 
[INFO] --- maven-enforcer-plugin:1.0:enforce (enforce-maven) @ scalace ---
[INFO] 
[INFO] --- maven-velocity-plugin:0.7-SNAPSHOT:generate (default) @ scalace ---
Velocity root path = /Users/ochafik/github/nativelibs4java/libraries/Scalace/src
[INFO] Found 1 files in '/Users/ochafik/github/nativelibs4java/libraries/Scalace/src/main/velocity'...
[INFO] Executing template 'scalac-plugin.xml'...
[INFO] Got properties : {project_name=scalace, project_version=0.3-SNAPSHOT}
[INFO] Got property : project_name = scalace
[INFO] Got property : project_version = 0.3-SNAPSHOT
Velocity root path = /Users/ochafik/github/nativelibs4java/libraries/Scalace/src
[INFO] Found 0 files in '/Users/ochafik/github/nativelibs4java/libraries/Scalace/src/test/velocity'...
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:resources (default-resources) @ scalace ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/ochafik/github/nativelibs4java/libraries/Scalace/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.3.2:compile (default-compile) @ scalace ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-scala-plugin:2.9.1:compile (default) @ scalace ---
[ERROR] /Users/ochafik/github/nativelibs4java/libraries/Scalace/src/main/java
[ERROR] /Users/ochafik/github/nativelibs4java/libraries/Scalace/target/generated-sources/main
[ERROR] /Users/ochafik/github/nativelibs4java/libraries/Scalace/src/main/scala
[INFO] Compiling 24 source files to /Users/ochafik/github/nativelibs4java/libraries/Scalace/target/classes
[WARNING] warning: there were 9 deprecation warnings; re-run with -deprecation for details
[WARNING] warning: there were 8 unchecked warnings; re-run with -unchecked for details
[WARNING] two warnings found
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:testResources (default-testResources) @ scalace ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:2.3.2:testCompile (default-testCompile) @ scalace ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-scala-plugin:2.9.1:testCompile (default) @ scalace ---
[ERROR] /Users/ochafik/github/nativelibs4java/libraries/Scalace/src/test/java
[ERROR] /Users/ochafik/github/nativelibs4java/libraries/Scalace/src/test/java/../scala
[INFO] Compiling 19 source files to /Users/ochafik/github/nativelibs4java/libraries/Scalace/target/test-classes
[WARNING] warning: there were 3 deprecation warnings; re-run with -deprecation for details
[WARNING] one warning found
[INFO] 
[INFO] --- maven-surefire-plugin:2.7.2:test (default-test) @ scalace ---
[INFO] Surefire report directory: /Users/ochafik/github/nativelibs4java/libraries/Scalace/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.nativelibs4java.scalace.test.AllOrSome2WhileTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 12.049 sec
Running com.nativelibs4java.scalace.test.ArrayChainedPerformanceTest
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForall, n = 2, cold]   OK (2.695214105793451x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForall, n = 2, warm]   OK (1.7841409691629957x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForall, n = 10, cold]   OK (1.8837209302325582x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForall, n = 10, warm]   OK (1.9671361502347418x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForall, n = 1000, cold]   OK (7.628571428571429x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForall, n = 1000, warm]   OK (3.466666666666667x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForall, n = 100000, cold]   OK (13.374662031672461x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForall, n = 100000, warm]   OK (48.5218253968254x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleExists, n = 2, cold]   OK (7.153543307086614x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleExists, n = 2, warm]   OK (1.7107843137254901x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleExists, n = 10, cold]   OK (1.814569536423841x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleExists, n = 10, warm]   OK (2.1908396946564888x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleExists, n = 1000, cold]   OK (5.002873563218391x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleExists, n = 1000, warm]   OK (4.571428571428571x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleExists, n = 100000, cold]   OK (13.839403247038174x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleExists, n = 100000, warm]   OK (53.53061224489796x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToArray, n = 2, cold]   OK (3.4975728155339807x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToArray, n = 2, warm]   OK (2.0961538461538463x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToArray, n = 10, cold]   OK (1.4457831325301205x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToArray, n = 10, warm]   OK (2.18x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToArray, n = 1000, cold]   OK (2.379204892966361x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToArray, n = 1000, warm]   OK (2.763888888888889x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToArray, n = 100000, cold]   OK (3.025333064190553x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToArray, n = 100000, warm]   OK (9.126965408805031x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToList, n = 2, cold]   OK (3.9582172701949863x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToList, n = 2, warm]   OK (2.1094890510948905x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToList, n = 10, cold]   OK (1.212686567164179x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToList, n = 10, warm]   OK (2.6869565217391305x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToList, n = 1000, cold]   OK (2.7269565217391305x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToList, n = 1000, warm]   OK (4.026041666666667x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToList, n = 100000, cold]   OK (3.3425103852732754x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToList, n = 100000, warm]   OK (9.484994640943194x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilter, n = 2, cold]   OK (5.114197530864198x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilter, n = 2, warm]   OK (2.1714285714285713x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilter, n = 10, cold]   OK (1.7385892116182573x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilter, n = 10, warm]   OK (2.5714285714285716x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilter, n = 1000, cold]   OK (3.2323580034423407x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilter, n = 1000, warm]   OK (3.9702380952380953x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilter, n = 100000, cold]   OK (5.289802681126676x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilter, n = 100000, warm]   OK (24.82982616651418x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilterNot, n = 2, cold]   OK (5.185185185185185x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilterNot, n = 2, warm]   OK (1.905109489051095x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilterNot, n = 10, cold]   OK (1.7276595744680852x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilterNot, n = 10, warm]   OK (2.360655737704918x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilterNot, n = 1000, cold]   OK (2.924646781789639x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilterNot, n = 1000, warm]   OK (4.591240875912408x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilterNot, n = 100000, cold]   OK (4.733997155049787x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilterNot, n = 100000, warm]   OK (15.413480885311872x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleCount, n = 2, cold]   OK (9.69811320754717x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleCount, n = 2, warm]   OK (3.15702479338843x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleCount, n = 10, cold]   OK (1.8564593301435406x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleCount, n = 10, warm]   OK (1.702127659574468x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleCount, n = 1000, cold]   OK (3.5427046263345194x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleCount, n = 1000, warm]   OK (3.92258064516129x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleCount, n = 100000, cold]   OK (7.603458676855017x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleCount, n = 100000, warm]   OK (18.738072054527752x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleTakeWhile, n = 2, cold]   OK (5.2585227272727275x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleTakeWhile, n = 2, warm]   OK (3.212121212121212x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleTakeWhile, n = 10, cold]   OK (1.5x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleTakeWhile, n = 10, warm]   OK (2.5405405405405403x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleTakeWhile, n = 1000, cold]   OK (5.15727002967359x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleTakeWhile, n = 1000, warm]   OK (4.170542635658915x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleTakeWhile, n = 100000, cold]   OK (9.97269100951212x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleTakeWhile, n = 100000, warm]   OK (25.675233644859812x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleDropWhile, n = 2, cold]   OK (5.672727272727273x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleDropWhile, n = 2, warm]   OK (2.5213675213675213x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleDropWhile, n = 10, cold]   OK (1.2982456140350878x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleDropWhile, n = 10, warm]   OK (1.7857142857142858x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleDropWhile, n = 1000, cold]   OK (2.8231827111984282x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleDropWhile, n = 1000, warm]   OK (5.380165289256198x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleDropWhile, n = 100000, cold]   OK (3.2520333791063694x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleDropWhile, n = 100000, warm]   OK (13.539480949751518x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForeach, n = 2, cold]   OK (7.117154811715481x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForeach, n = 2, warm]   OK (1.64375x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForeach, n = 10, cold]   OK (1.902061855670103x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForeach, n = 10, warm]   OK (1.704225352112676x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForeach, n = 1000, cold]   OK (3.2169625246548326x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForeach, n = 1000, warm]   OK (4.088757396449704x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForeach, n = 100000, cold]   OK (6.458161582852432x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForeach, n = 100000, warm]   OK (27.718074656188605x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMap, n = 2, cold]   OK (5.584375x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMap, n = 2, warm]   OK (1.9435483870967742x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMap, n = 10, cold]   OK (1.425x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMap, n = 10, warm]   OK (1.7925925925925925x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMap, n = 1000, cold]   OK (2.8945454545454545x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMap, n = 1000, warm]   OK (4.141935483870967x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMap, n = 100000, cold]   OK (3.898738918716444x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMap, n = 100000, warm]   OK (11.867165575304023x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleSum, n = 2, cold]   OK (6.404651162790698x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleSum, n = 2, warm]   OK (1.7884615384615385x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleSum, n = 10, cold]   OK (2.0789473684210527x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleSum, n = 10, warm]   OK (2.020979020979021x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleSum, n = 1000, cold]   OK (3.871900826446281x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleSum, n = 1000, warm]   OK (3.776315789473684x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleSum, n = 100000, cold]   OK (7.49133924799324x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleSum, n = 100000, warm]   OK (20.86907020872865x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleProduct, n = 2, cold]   OK (8.091743119266056x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleProduct, n = 2, warm]   OK (1.9555555555555555x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleProduct, n = 10, cold]   OK (1.7357512953367875x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleProduct, n = 10, warm]   OK (1.9130434782608696x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleProduct, n = 1000, cold]   OK (3.5806451612903225x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleProduct, n = 1000, warm]   OK (4.7407407407407405x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleProduct, n = 100000, cold]   OK (6.959973166368515x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleProduct, n = 100000, warm]   OK (23.50873786407767x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMin, n = 2, cold]   OK (7.5625x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMin, n = 2, warm]   OK (1.9647887323943662x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMin, n = 10, cold]   OK (1.813953488372093x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMin, n = 10, warm]   OK (2.625x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMin, n = 1000, cold]   OK (3.892857142857143x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMin, n = 1000, warm]   OK (5.341269841269841x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMin, n = 100000, cold]   OK (7.928817451205511x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMin, n = 100000, warm]   OK (25.026258205689278x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMax, n = 2, cold]   OK (8.71875x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMax, n = 2, warm]   OK (2.0956521739130434x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMax, n = 10, cold]   OK (2.027027027027027x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMax, n = 10, warm]   OK (2.115107913669065x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMax, n = 1000, cold]   OK (3.5135135135135136x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMax, n = 1000, warm]   OK (3.8366013071895426x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMax, n = 100000, cold]   OK (5.959052978847273x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMax, n = 100000, warm]   OK (27.17031070195627x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanLeft, n = 2, cold]   OK (5.224806201550388x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanLeft, n = 2, warm]   OK (2.046153846153846x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanLeft, n = 10, cold]   OK (1.565217391304348x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanLeft, n = 10, warm]   OK (2.4473684210526314x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanLeft, n = 1000, cold]   OK (3.3098106712564546x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanLeft, n = 1000, warm]   OK (5.107913669064748x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanLeft, n = 100000, cold]   OK (4.713623612635687x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanLeft, n = 100000, warm]   OK (13.80908626850434x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanRight, n = 2, cold]   OK (0.9608750525872949x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanRight, n = 2, warm]   OK (1.43801652892562x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanRight, n = 10, cold]   OK (1.158974358974359x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanRight, n = 10, warm]   OK (1.1258278145695364x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanRight, n = 1000, cold]   OK (1.4835377663008393x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanRight, n = 1000, warm]   OK (1.5670731707317074x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanRight, n = 100000, cold] ERROR: only 0.8986917793257445x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanRight, n = 100000, warm]   OK (2.3353966070609813x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldLeft, n = 2, cold]   OK (9.567164179104477x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldLeft, n = 2, warm]   OK (1.8968253968253967x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldLeft, n = 10, cold]   OK (1.702020202020202x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldLeft, n = 10, warm]   OK (1.8699186991869918x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldLeft, n = 1000, cold]   OK (4.508333333333334x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldLeft, n = 1000, warm]   OK (3.6706586826347305x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldLeft, n = 100000, cold]   OK (6.389227642276423x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldLeft, n = 100000, warm]   OK (22.87869822485207x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldRight, n = 2, cold]   OK (1.6115173674588665x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldRight, n = 2, warm]   OK (1.8211920529801324x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldRight, n = 10, cold]   OK (1.226148409893993x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldRight, n = 10, warm]   OK (1.5870967741935484x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldRight, n = 1000, cold]   OK (1.6785046728971962x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldRight, n = 1000, warm]   OK (2.865979381443299x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldRight, n = 100000, cold]   OK (1.337447033898305x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldRight, n = 100000, warm]   OK (5.516573176950535x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceLeft, n = 2, cold]   OK (7.493449781659389x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceLeft, n = 2, warm]   OK (1.8503937007874016x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceLeft, n = 10, cold]   OK (1.8663793103448276x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceLeft, n = 10, warm]   OK (2.053030303030303x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceLeft, n = 1000, cold]   OK (3.113680154142582x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceLeft, n = 1000, warm]   OK (4.669064748201439x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceLeft, n = 100000, cold]   OK (6.340385421030582x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceLeft, n = 100000, warm]   OK (30.269377382465056x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceRight, n = 2, cold]   OK (1.6957383548067393x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceRight, n = 2, warm]   OK (1.375x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceRight, n = 10, cold]   OK (1.0466472303206997x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceRight, n = 10, warm]   OK (1.5917159763313609x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceRight, n = 1000, cold]   OK (1.84x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceRight, n = 1000, warm]   OK (2.105839416058394x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceRight, n = 100000, cold]   OK (2.6387462558836114x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceRight, n = 100000, warm]   OK (5.195060483870968x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleArrayTabulate, n = 2, cold]   OK (2.898843930635838x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleArrayTabulate, n = 2, warm]   OK (1.1895424836601307x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleArrayTabulate, n = 10, cold]   OK (1.0093896713615023x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleArrayTabulate, n = 10, warm]   OK (1.272108843537415x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleArrayTabulate, n = 1000, cold]   OK (1.46677471636953x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleArrayTabulate, n = 1000, warm]   OK (2.4496644295302015x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleArrayTabulate, n = 100000, cold]   OK (1.7560933147632312x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleArrayTabulate, n = 100000, warm]   OK (9.077201447527141x faster, expected > 0.95x)

Tests run: 22, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 237.764 sec <<< FAILURE!
Running com.nativelibs4java.scalace.test.ArrayForeach2WhileTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 15.727 sec
Running com.nativelibs4java.scalace.test.ArrayMap2WhileTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 19.769 sec
Running com.nativelibs4java.scalace.test.ArrayPerformanceTest
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForall, n = 2, cold]   OK (5.262886597938144x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForall, n = 2, warm]   OK (1.6048387096774193x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForall, n = 10, cold]   OK (1.5904255319148937x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForall, n = 10, warm]   OK (1.2658227848101267x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForall, n = 1000, cold]   OK (2.966867469879518x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForall, n = 1000, warm]   OK (1.8591549295774648x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForall, n = 100000, cold]   OK (2.5949470252648736x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForall, n = 100000, warm]   OK (13.109137055837563x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleExists, n = 2, cold]   OK (4.744186046511628x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleExists, n = 2, warm]   OK (2.4315068493150687x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleExists, n = 10, cold]   OK (1.4522613065326633x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleExists, n = 10, warm]   OK (1.9444444444444444x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleExists, n = 1000, cold]   OK (2.6628895184135977x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleExists, n = 1000, warm]   OK (2.906474820143885x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleExists, n = 100000, cold]   OK (2.2724888539207972x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleExists, n = 100000, warm]   OK (11.405825242718446x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToArray, n = 2, cold]   OK (1.1306990881458967x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToArray, n = 2, warm]   OK (1.2713178294573644x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToArray, n = 10, cold]   OK (1.1014492753623188x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToArray, n = 10, warm]   OK (1.7241379310344827x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToArray, n = 1000, cold] ERROR: only 0.5845410628019324x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToArray, n = 1000, warm]   OK (1.4014598540145986x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToArray, n = 100000, cold] ERROR: only 0.15493683939159578x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToArray, n = 100000, warm] ERROR: only 0.20473372781065088x faster (expected >= 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToList, n = 2, cold]   OK (1.099041533546326x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToList, n = 2, warm]   OK (1.3307692307692307x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToList, n = 10, cold] ERROR: only 0.9304347826086956x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToList, n = 10, warm]   OK (1.2074074074074075x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToList, n = 1000, cold] ERROR: only 0.7145015105740181x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToList, n = 1000, warm]   OK (1.3674242424242424x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToList, n = 100000, cold]   OK (1.3048114764504253x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleToList, n = 100000, warm]   OK (2.727476530755219x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilter, n = 2, cold]   OK (2.8287461773700304x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilter, n = 2, warm]   OK (1.546218487394958x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilter, n = 10, cold]   OK (1.1839622641509433x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilter, n = 10, warm]   OK (1.609375x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilter, n = 1000, cold]   OK (1.8298969072164948x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilter, n = 1000, warm]   OK (3.287769784172662x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilter, n = 100000, cold]   OK (1.8439256376999569x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilter, n = 100000, warm]   OK (6.8897097625329815x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilterNot, n = 2, cold]   OK (3.197278911564626x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilterNot, n = 2, warm]   OK (1.4696969696969697x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilterNot, n = 10, cold]   OK (1.2876712328767124x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilterNot, n = 10, warm]   OK (1.5528455284552845x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilterNot, n = 1000, cold]   OK (1.926905132192846x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilterNot, n = 1000, warm]   OK (3.456953642384106x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilterNot, n = 100000, cold]   OK (2.2247448979591837x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFilterNot, n = 100000, warm]   OK (7.843455497382199x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleCount, n = 2, cold]   OK (4.962790697674419x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleCount, n = 2, warm]   OK (1.534351145038168x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleCount, n = 10, cold]   OK (1.4232804232804233x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleCount, n = 10, warm]   OK (1.4736842105263157x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleCount, n = 1000, cold]   OK (3.7724867724867726x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleCount, n = 1000, warm]   OK (3.096296296296296x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleCount, n = 100000, cold]   OK (3.138680203045685x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleCount, n = 100000, warm]   OK (12.639285714285714x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleTakeWhile, n = 2, cold]   OK (2.67027027027027x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleTakeWhile, n = 2, warm]   OK (1.803030303030303x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleTakeWhile, n = 10, cold]   OK (1.3377777777777777x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleTakeWhile, n = 10, warm]   OK (1.7058823529411764x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleTakeWhile, n = 1000, cold]   OK (1.5819672131147542x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleTakeWhile, n = 1000, warm]   OK (2.8962962962962964x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleTakeWhile, n = 100000, cold]   OK (2.141542002301496x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleTakeWhile, n = 100000, warm]   OK (5.695724597445864x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleDropWhile, n = 2, cold]   OK (3.207547169811321x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleDropWhile, n = 2, warm]   OK (1.8045112781954886x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleDropWhile, n = 10, cold]   OK (1.3623853211009174x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleDropWhile, n = 10, warm]   OK (1.624113475177305x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleDropWhile, n = 1000, cold]   OK (1.4375x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleDropWhile, n = 1000, warm]   OK (3.097902097902098x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleDropWhile, n = 100000, cold]   OK (1.7793696275071633x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleDropWhile, n = 100000, warm]   OK (5.89043381535039x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForeach, n = 2, cold]   OK (5.619289340101523x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForeach, n = 2, warm]   OK (1.4785714285714286x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForeach, n = 10, cold]   OK (1.2901554404145077x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForeach, n = 10, warm]   OK (1.4661654135338347x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForeach, n = 1000, cold]   OK (2.0975103734439835x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForeach, n = 1000, warm]   OK (2.2125984251968505x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForeach, n = 100000, cold]   OK (2.976881872004511x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleForeach, n = 100000, warm]   OK (15.0x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMap, n = 2, cold]   OK (2.8369905956112853x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMap, n = 2, warm]   OK (1.381294964028777x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMap, n = 10, cold]   OK (1.47x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMap, n = 10, warm]   OK (1.6343283582089552x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMap, n = 1000, cold]   OK (2.3707865168539324x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMap, n = 1000, warm]   OK (4.050420168067227x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMap, n = 100000, cold]   OK (3.4009122006841506x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMap, n = 100000, warm]   OK (14.85385500575374x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleSum, n = 2, cold]   OK (1.861904761904762x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleSum, n = 2, warm]   OK (1.3636363636363635x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleSum, n = 10, cold]   OK (1.24x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleSum, n = 10, warm]   OK (1.4878048780487805x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleSum, n = 1000, cold]   OK (1.464705882352941x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleSum, n = 1000, warm]   OK (2.7480916030534353x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleSum, n = 100000, cold]   OK (2.3408646534868565x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleSum, n = 100000, warm]   OK (17.940630797773654x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleProduct, n = 2, cold]   OK (2.0765027322404372x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleProduct, n = 2, warm]   OK (1.5258620689655173x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleProduct, n = 10, cold]   OK (1.198019801980198x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleProduct, n = 10, warm]   OK (1.5446428571428572x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleProduct, n = 1000, cold] ERROR: only 0.9485981308411215x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleProduct, n = 1000, warm]   OK (2.7132867132867133x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleProduct, n = 100000, cold]   OK (2.321402304486394x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleProduct, n = 100000, warm]   OK (15.894480519480519x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMin, n = 2, cold]   OK (1.7096774193548387x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMin, n = 2, warm]   OK (1.5572519083969465x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMin, n = 10, cold]   OK (1.3112244897959184x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMin, n = 10, warm]   OK (1.507462686567164x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMin, n = 1000, cold]   OK (1.3154761904761905x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMin, n = 1000, warm]   OK (2.12x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMin, n = 100000, cold]   OK (1.9474504564684925x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMin, n = 100000, warm]   OK (13.4992x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMax, n = 2, cold]   OK (1.7815533980582525x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMax, n = 2, warm]   OK (1.4924242424242424x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMax, n = 10, cold]   OK (1.0138248847926268x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMax, n = 10, warm]   OK (2.3576642335766422x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMax, n = 1000, cold]   OK (1.0694444444444444x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMax, n = 1000, warm]   OK (3.116788321167883x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMax, n = 100000, cold]   OK (1.8241525423728813x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleMax, n = 100000, warm]   OK (14.739208633093526x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanLeft, n = 2, cold]   OK (3.731707317073171x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanLeft, n = 2, warm]   OK (2.1545454545454548x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanLeft, n = 10, cold]   OK (1.6132075471698113x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanLeft, n = 10, warm]   OK (1.7364341085271318x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanLeft, n = 1000, cold]   OK (2.9628865979381445x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanLeft, n = 1000, warm]   OK (2.610294117647059x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanLeft, n = 100000, cold]   OK (4.311451342281879x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanLeft, n = 100000, warm]   OK (15.152912621359222x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanRight, n = 2, cold]   OK (1.389413988657845x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanRight, n = 2, warm]   OK (1.0494699646643109x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanRight, n = 10, cold]   OK (1.0x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanRight, n = 10, warm]   OK (1.053231939163498x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanRight, n = 1000, cold]   OK (0.9657072872014697x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanRight, n = 1000, warm] ERROR: only 0.9408866995073891x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanRight, n = 100000, cold] ERROR: only 0.7776826755428753x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleScanRight, n = 100000, warm]   OK (0.9967305193444272x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldLeft, n = 2, cold]   OK (4.3053097345132745x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldLeft, n = 2, warm]   OK (1.328x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldLeft, n = 10, cold]   OK (1.1616161616161615x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldLeft, n = 10, warm]   OK (1.421875x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldLeft, n = 1000, cold]   OK (1.8727272727272728x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldLeft, n = 1000, warm]   OK (2.422818791946309x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldLeft, n = 100000, cold]   OK (3.1990790899241603x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldLeft, n = 100000, warm]   OK (16.163120567375888x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldRight, n = 2, cold]   OK (0.9602510460251046x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldRight, n = 2, warm]   OK (1.0056179775280898x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldRight, n = 10, cold]   OK (1.0074906367041199x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldRight, n = 10, warm]   OK (0.958974358974359x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldRight, n = 1000, cold] ERROR: only 0.9458483754512635x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldRight, n = 1000, warm]   OK (1.0425531914893618x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldRight, n = 100000, cold] ERROR: only 0.9454238106737503x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleFoldRight, n = 100000, warm] ERROR: only 0.9483644228169775x faster (expected >= 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceLeft, n = 2, cold]   OK (5.414364640883978x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceLeft, n = 2, warm]   OK (1.362962962962963x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceLeft, n = 10, cold]   OK (1.3798882681564246x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceLeft, n = 10, warm]   OK (1.4409448818897639x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceLeft, n = 1000, cold]   OK (2.2686915887850465x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceLeft, n = 1000, warm]   OK (3.0763358778625953x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceLeft, n = 100000, cold]   OK (2.904066985645933x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceLeft, n = 100000, warm]   OK (17.512014787430683x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceRight, n = 2, cold]   OK (0.9616122840690979x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceRight, n = 2, warm] ERROR: only 0.9052631578947369x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceRight, n = 10, cold]   OK (1.0076923076923077x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceRight, n = 10, warm]   OK (1.1412429378531073x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceRight, n = 1000, cold] ERROR: only 0.8518057285180572x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceRight, n = 1000, warm] ERROR: only 0.8952702702702703x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceRight, n = 100000, cold]   OK (1.0053651593123836x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleReduceRight, n = 100000, warm]   OK (0.980715221868564x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleArrayTabulate, n = 2, cold]   OK (2.7663817663817665x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleArrayTabulate, n = 2, warm]   OK (1.147887323943662x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleArrayTabulate, n = 10, cold]   OK (1.1473214285714286x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleArrayTabulate, n = 10, warm]   OK (1.2810457516339868x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleArrayTabulate, n = 1000, cold]   OK (2.1049723756906076x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleArrayTabulate, n = 1000, warm]   OK (2.6466666666666665x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleArrayTabulate, n = 100000, cold]   OK (1.4524339360222531x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ArrayPerformanceTest.simpleArrayTabulate, n = 100000, warm]   OK (9.34610630407911x faster, expected > 0.95x)

Tests run: 22, Failures: 6, Errors: 0, Skipped: 0, Time elapsed: 246.593 sec <<< FAILURE!
Running com.nativelibs4java.scalace.test.Filter2WhileTest
EXPECTED :
	Compiled from "simplePrimitiveArrayFilter.scala"
	public class simplePrimitiveArrayFilter extends java.lang.Object implements scala.ScalaObject{
	public void invoke();
	  Code:
	   0:	getstatic	; //Field scala/Array$.MODULE$:Lscala/Array$;
	   3:	iconst_1
	   4:	getstatic	; //Field scala/Predef$.MODULE$:Lscala/Predef$;
	   7:	iconst_3
	   8:	newarray int
	   10:	dup
	   11:	iconst_0
	   12:	iconst_2
	   13:	iastore
	   14:	dup
	   15:	iconst_1
	   16:	iconst_3
	   17:	iastore
	   18:	dup
	   19:	iconst_2
	   20:	iconst_4
	   21:	iastore
	   22:	invokevirtual	; //Method scala/Predef$.wrapIntArray:([I)Lscala/collection/mutable/WrappedArray;
	   25:	invokevirtual	; //Method scala/Array$.apply:(ILscala/collection/Seq;)[I
	   28:	astore_1
	   29:	aload_1
	   30:	astore_3
	   31:	aload_3
	   32:	arraylength
	   33:	istore_2
	   34:	iconst_0
	   35:	istore	5
	   37:	new	; //class scala/collection/mutable/ArrayBuilder$ofInt
	   40:	dup
	   41:	invokespecial	; //Method scala/collection/mutable/ArrayBuilder$ofInt."<init>":()V
	   44:	astore	6
	   46:	iload	5
	   48:	iload_2
	   49:	if_icmpge	87
	   52:	aload_3
	   53:	iload	5
	   55:	iaload
	   56:	istore	4
	   58:	iload	4
	   60:	iconst_0
	   61:	if_icmpeq	74
	   64:	aload	6
	   66:	iload	4
	   68:	invokevirtual	; //Method scala/collection/mutable/ArrayBuilder$ofInt.$plus$eq:(I)Lscala/collection/mutable/ArrayBuilder$ofInt;
	   71:	goto	77
	   74:	getstatic	; //Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
	   77:	pop
	   78:	iload	5
	   80:	iconst_1
	   81:	iadd
	   82:	istore	5
	   84:	goto	46
	   87:	aload	6
	   89:	invokevirtual	; //Method scala/collection/mutable/ArrayBuilder$ofInt.result:()[I
	   92:	pop
	   93:	return
	
	public simplePrimitiveArrayFilter();
	  Code:
	   0:	aload_0
	   1:	invokespecial	; //Method java/lang/Object."<init>":()V
	   4:	return
	
	}
	
	
FOUND :
	Compiled from "simplePrimitiveArrayFilter.scala"
	public class simplePrimitiveArrayFilter extends java.lang.Object implements scala.ScalaObject{
	public void invoke();
	  Code:
	   0:	getstatic	; //Field scala/Array$.MODULE$:Lscala/Array$;
	   3:	iconst_1
	   4:	getstatic	; //Field scala/Predef$.MODULE$:Lscala/Predef$;
	   7:	iconst_3
	   8:	newarray int
	   10:	dup
	   11:	iconst_0
	   12:	iconst_2
	   13:	iastore
	   14:	dup
	   15:	iconst_1
	   16:	iconst_3
	   17:	iastore
	   18:	dup
	   19:	iconst_2
	   20:	iconst_4
	   21:	iastore
	   22:	invokevirtual	; //Method scala/Predef$.wrapIntArray:([I)Lscala/collection/mutable/WrappedArray;
	   25:	invokevirtual	; //Method scala/Array$.apply:(ILscala/collection/Seq;)[I
	   28:	astore_1
	   29:	aload_1
	   30:	astore_3
	   31:	aload_3
	   32:	arraylength
	   33:	istore_2
	   34:	iconst_0
	   35:	istore	5
	   37:	new	; //class scala/collection/mutable/ArrayBuilder$ofInt
	   40:	dup
	   41:	invokespecial	; //Method scala/collection/mutable/ArrayBuilder$ofInt."<init>":()V
	   44:	astore	6
	   46:	iload	5
	   48:	iload_2
	   49:	if_icmpge	81
	   52:	aload_3
	   53:	iload	5
	   55:	iaload
	   56:	istore	4
	   58:	iload	4
	   60:	iconst_0
	   61:	if_icmpeq	72
	   64:	aload	6
	   66:	iload	4
	   68:	invokevirtual	; //Method scala/collection/mutable/ArrayBuilder$ofInt.$plus$eq:(I)Lscala/collection/mutable/ArrayBuilder$ofInt;
	   71:	pop
	   72:	iload	5
	   74:	iconst_1
	   75:	iadd
	   76:	istore	5
	   78:	goto	46
	   81:	aload	6
	   83:	invokevirtual	; //Method scala/collection/mutable/ArrayBuilder$ofInt.result:()[I
	   86:	pop
	   87:	return
	
	public simplePrimitiveArrayFilter();
	  Code:
	   0:	aload_0
	   1:	invokespecial	; //Method java/lang/Object."<init>":()V
	   4:	return
	
	}
	
	
EXPECTED :
	Compiled from "simpleRefArrayFilter.scala"
	public class simpleRefArrayFilter extends java.lang.Object implements scala.ScalaObject{
	public void invoke();
	  Code:
	   0:	iconst_4
	   1:	anewarray	; //class java/lang/String
	   4:	dup
	   5:	iconst_0
	   6:	ldc	; //String 1
	   8:	aastore
	   9:	dup
	   10:	iconst_1
	   11:	ldc	; //String 2
	   13:	aastore
	   14:	dup
	   15:	iconst_2
	   16:	ldc	; //String 3
	   18:	aastore
	   19:	dup
	   20:	iconst_3
	   21:	ldc	; //String 4
	   23:	aastore
	   24:	checkcast	; //class "[Ljava/lang/Object;"
	   27:	checkcast	; //class "[Ljava/lang/String;"
	   30:	astore_1
	   31:	aload_1
	   32:	astore_3
	   33:	aload_3
	   34:	arraylength
	   35:	istore_2
	   36:	iconst_0
	   37:	istore	5
	   39:	new	; //class scala/collection/mutable/ArrayBuilder$ofRef
	   42:	dup
	   43:	getstatic	; //Field scala/reflect/Manifest$.MODULE$:Lscala/reflect/Manifest$;
	   46:	ldc	; //class java/lang/String
	   48:	invokevirtual	; //Method scala/reflect/Manifest$.classType:(Ljava/lang/Class;)Lscala/reflect/Manifest;
	   51:	invokespecial	; //Method scala/collection/mutable/ArrayBuilder$ofRef."<init>":(Lscala/reflect/Manifest;)V
	   54:	astore	6
	   56:	iload	5
	   58:	iload_2
	   59:	if_icmpge	114
	   62:	aload_3
	   63:	iload	5
	   65:	aaload
	   66:	astore	4
	   68:	aload	4
	   70:	dup
	   71:	ifnonnull	83
	   74:	pop
	   75:	ldc	; //String 
	   77:	ifnull	91
	   80:	goto	97
	   83:	ldc	; //String 
	   85:	invokevirtual	; //Method java/lang/Object.equals:(Ljava/lang/Object;)Z
	   88:	ifeq	97
	   91:	getstatic	; //Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
	   94:	goto	104
	   97:	aload	6
	   99:	aload	4
	   101:	invokevirtual	; //Method scala/collection/mutable/ArrayBuilder$ofRef.$plus$eq:(Ljava/lang/Object;)Lscala/collection/mutable/ArrayBuilder$ofRef;
	   104:	pop
	   105:	iload	5
	   107:	iconst_1
	   108:	iadd
	   109:	istore	5
	   111:	goto	56
	   114:	aload	6
	   116:	invokevirtual	; //Method scala/collection/mutable/ArrayBuilder$ofRef.result:()[Ljava/lang/Object;
	   119:	pop
	   120:	return
	
	public simpleRefArrayFilter();
	  Code:
	   0:	aload_0
	   1:	invokespecial	; //Method java/lang/Object."<init>":()V
	   4:	return
	
	}
	
	
FOUND :
	Compiled from "simpleRefArrayFilter.scala"
	public class simpleRefArrayFilter extends java.lang.Object implements scala.ScalaObject{
	public void invoke();
	  Code:
	   0:	iconst_4
	   1:	anewarray	; //class java/lang/String
	   4:	dup
	   5:	iconst_0
	   6:	ldc	; //String 1
	   8:	aastore
	   9:	dup
	   10:	iconst_1
	   11:	ldc	; //String 2
	   13:	aastore
	   14:	dup
	   15:	iconst_2
	   16:	ldc	; //String 3
	   18:	aastore
	   19:	dup
	   20:	iconst_3
	   21:	ldc	; //String 4
	   23:	aastore
	   24:	checkcast	; //class "[Ljava/lang/Object;"
	   27:	checkcast	; //class "[Ljava/lang/String;"
	   30:	astore_1
	   31:	aload_1
	   32:	astore_3
	   33:	aload_3
	   34:	arraylength
	   35:	istore_2
	   36:	iconst_0
	   37:	istore	5
	   39:	new	; //class scala/collection/mutable/ArrayBuilder$ofRef
	   42:	dup
	   43:	getstatic	; //Field scala/reflect/Manifest$.MODULE$:Lscala/reflect/Manifest$;
	   46:	ldc	; //class java/lang/String
	   48:	invokevirtual	; //Method scala/reflect/Manifest$.classType:(Ljava/lang/Class;)Lscala/reflect/Manifest;
	   51:	invokespecial	; //Method scala/collection/mutable/ArrayBuilder$ofRef."<init>":(Lscala/reflect/Manifest;)V
	   54:	astore	6
	   56:	iload	5
	   58:	iload_2
	   59:	if_icmpge	108
	   62:	aload_3
	   63:	iload	5
	   65:	aaload
	   66:	astore	4
	   68:	aload	4
	   70:	dup
	   71:	ifnonnull	83
	   74:	pop
	   75:	ldc	; //String 
	   77:	ifnull	99
	   80:	goto	91
	   83:	ldc	; //String 
	   85:	invokevirtual	; //Method java/lang/Object.equals:(Ljava/lang/Object;)Z
	   88:	ifne	99
	   91:	aload	6
	   93:	aload	4
	   95:	invokevirtual	; //Method scala/collection/mutable/ArrayBuilder$ofRef.$plus$eq:(Ljava/lang/Object;)Lscala/collection/mutable/ArrayBuilder$ofRef;
	   98:	pop
	   99:	iload	5
	   101:	iconst_1
	   102:	iadd
	   103:	istore	5
	   105:	goto	56
	   108:	aload	6
	   110:	invokevirtual	; //Method scala/collection/mutable/ArrayBuilder$ofRef.result:()[Ljava/lang/Object;
	   113:	pop
	   114:	return
	
	public simpleRefArrayFilter();
	  Code:
	   0:	aload_0
	   1:	invokespecial	; //Method java/lang/Object."<init>":()V
	   4:	return
	
	}
	
	
EXPECTED :
	Compiled from "tupleArrayFilter.scala"
	public class tupleArrayFilter extends java.lang.Object implements scala.ScalaObject{
	public void invoke();
	  Code:
	   0:	iconst_3
	   1:	anewarray	; //class scala/Tuple2
	   4:	dup
	   5:	iconst_0
	   6:	new	; //class scala/Tuple2$mcII$sp
	   9:	dup
	   10:	iconst_1
	   11:	iconst_2
	   12:	invokespecial	; //Method scala/Tuple2$mcII$sp."<init>":(II)V
	   15:	aastore
	   16:	dup
	   17:	iconst_1
	   18:	new	; //class scala/Tuple2$mcII$sp
	   21:	dup
	   22:	bipush	10
	   24:	bipush	20
	   26:	invokespecial	; //Method scala/Tuple2$mcII$sp."<init>":(II)V
	   29:	aastore
	   30:	dup
	   31:	iconst_2
	   32:	new	; //class scala/Tuple2$mcII$sp
	   35:	dup
	   36:	bipush	100
	   38:	sipush	200
	   41:	invokespecial	; //Method scala/Tuple2$mcII$sp."<init>":(II)V
	   44:	aastore
	   45:	checkcast	; //class "[Ljava/lang/Object;"
	   48:	checkcast	; //class "[Lscala/Tuple2;"
	   51:	astore_1
	   52:	aload_1
	   53:	astore_3
	   54:	aload_3
	   55:	arraylength
	   56:	istore_2
	   57:	iconst_0
	   58:	istore	5
	   60:	new	; //class scala/collection/mutable/ArrayBuilder$ofRef
	   63:	dup
	   64:	getstatic	; //Field scala/reflect/Manifest$.MODULE$:Lscala/reflect/Manifest$;
	   67:	ldc	; //class scala/Tuple2
	   69:	getstatic	; //Field scala/reflect/Manifest$.MODULE$:Lscala/reflect/Manifest$;
	   72:	invokevirtual	; //Method scala/reflect/Manifest$.Int:()Lscala/reflect/AnyValManifest;
	   75:	getstatic	; //Field scala/Predef$.MODULE$:Lscala/Predef$;
	   78:	iconst_1
	   79:	anewarray	; //class scala/reflect/OptManifest
	   82:	dup
	   83:	iconst_0
	   84:	getstatic	; //Field scala/reflect/Manifest$.MODULE$:Lscala/reflect/Manifest$;
	   87:	invokevirtual	; //Method scala/reflect/Manifest$.Int:()Lscala/reflect/AnyValManifest;
	   90:	aastore
	   91:	checkcast	; //class "[Ljava/lang/Object;"
	   94:	invokevirtual	; //Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
	   97:	invokevirtual	; //Method scala/reflect/Manifest$.classType:(Ljava/lang/Class;Lscala/reflect/OptManifest;Lscala/collection/Seq;)Lscala/reflect/Manifest;
	   100:	invokespecial	; //Method scala/collection/mutable/ArrayBuilder$ofRef."<init>":(Lscala/reflect/Manifest;)V
	   103:	astore	6
	   105:	iload	5
	   107:	iload_2
	   108:	if_icmpge	150
	   111:	aload_3
	   112:	iload	5
	   114:	aaload
	   115:	astore	4
	   117:	aload	4
	   119:	invokevirtual	; //Method scala/Tuple2._1$mcI$sp:()I
	   122:	bipush	30
	   124:	if_icmpge	137
	   127:	aload	6
	   129:	aload	4
	   131:	invokevirtual	; //Method scala/collection/mutable/ArrayBuilder$ofRef.$plus$eq:(Ljava/lang/Object;)Lscala/collection/mutable/ArrayBuilder$ofRef;
	   134:	goto	140
	   137:	getstatic	; //Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
	   140:	pop
	   141:	iload	5
	   143:	iconst_1
	   144:	iadd
	   145:	istore	5
	   147:	goto	105
	   150:	aload	6
	   152:	invokevirtual	; //Method scala/collection/mutable/ArrayBuilder$ofRef.result:()[Ljava/lang/Object;
	   155:	pop
	   156:	return
	
	public tupleArrayFilter();
	  Code:
	   0:	aload_0
	   1:	invokespecial	; //Method java/lang/Object."<init>":()V
	   4:	return
	
	}
	
	
FOUND :
	Compiled from "tupleArrayFilter.scala"
	public class tupleArrayFilter extends java.lang.Object implements scala.ScalaObject{
	public void invoke();
	  Code:
	   0:	iconst_3
	   1:	anewarray	; //class scala/Tuple2
	   4:	dup
	   5:	iconst_0
	   6:	new	; //class scala/Tuple2$mcII$sp
	   9:	dup
	   10:	iconst_1
	   11:	iconst_2
	   12:	invokespecial	; //Method scala/Tuple2$mcII$sp."<init>":(II)V
	   15:	aastore
	   16:	dup
	   17:	iconst_1
	   18:	new	; //class scala/Tuple2$mcII$sp
	   21:	dup
	   22:	bipush	10
	   24:	bipush	20
	   26:	invokespecial	; //Method scala/Tuple2$mcII$sp."<init>":(II)V
	   29:	aastore
	   30:	dup
	   31:	iconst_2
	   32:	new	; //class scala/Tuple2$mcII$sp
	   35:	dup
	   36:	bipush	100
	   38:	sipush	200
	   41:	invokespecial	; //Method scala/Tuple2$mcII$sp."<init>":(II)V
	   44:	aastore
	   45:	checkcast	; //class "[Ljava/lang/Object;"
	   48:	checkcast	; //class "[Lscala/Tuple2;"
	   51:	astore_1
	   52:	aload_1
	   53:	astore_3
	   54:	aload_3
	   55:	arraylength
	   56:	istore_2
	   57:	iconst_0
	   58:	istore	5
	   60:	new	; //class scala/collection/mutable/ArrayBuilder$ofRef
	   63:	dup
	   64:	getstatic	; //Field scala/reflect/Manifest$.MODULE$:Lscala/reflect/Manifest$;
	   67:	ldc	; //class scala/Tuple2
	   69:	getstatic	; //Field scala/reflect/Manifest$.MODULE$:Lscala/reflect/Manifest$;
	   72:	invokevirtual	; //Method scala/reflect/Manifest$.Int:()Lscala/reflect/AnyValManifest;
	   75:	getstatic	; //Field scala/Predef$.MODULE$:Lscala/Predef$;
	   78:	iconst_1
	   79:	anewarray	; //class scala/reflect/OptManifest
	   82:	dup
	   83:	iconst_0
	   84:	getstatic	; //Field scala/reflect/Manifest$.MODULE$:Lscala/reflect/Manifest$;
	   87:	invokevirtual	; //Method scala/reflect/Manifest$.Int:()Lscala/reflect/AnyValManifest;
	   90:	aastore
	   91:	checkcast	; //class "[Ljava/lang/Object;"
	   94:	invokevirtual	; //Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
	   97:	invokevirtual	; //Method scala/reflect/Manifest$.classType:(Ljava/lang/Class;Lscala/reflect/OptManifest;Lscala/collection/Seq;)Lscala/reflect/Manifest;
	   100:	invokespecial	; //Method scala/collection/mutable/ArrayBuilder$ofRef."<init>":(Lscala/reflect/Manifest;)V
	   103:	astore	6
	   105:	iload	5
	   107:	iload_2
	   108:	if_icmpge	144
	   111:	aload_3
	   112:	iload	5
	   114:	aaload
	   115:	astore	4
	   117:	aload	4
	   119:	invokevirtual	; //Method scala/Tuple2._1$mcI$sp:()I
	   122:	bipush	30
	   124:	if_icmpge	135
	   127:	aload	6
	   129:	aload	4
	   131:	invokevirtual	; //Method scala/collection/mutable/ArrayBuilder$ofRef.$plus$eq:(Ljava/lang/Object;)Lscala/collection/mutable/ArrayBuilder$ofRef;
	   134:	pop
	   135:	iload	5
	   137:	iconst_1
	   138:	iadd
	   139:	istore	5
	   141:	goto	105
	   144:	aload	6
	   146:	invokevirtual	; //Method scala/collection/mutable/ArrayBuilder$ofRef.result:()[Ljava/lang/Object;
	   149:	pop
	   150:	return
	
	public tupleArrayFilter();
	  Code:
	   0:	aload_0
	   1:	invokespecial	; //Method java/lang/Object."<init>":()V
	   4:	return
	
	}
	
	
Tests run: 4, Failures: 3, Errors: 0, Skipped: 0, Time elapsed: 4.527 sec <<< FAILURE!
Running com.nativelibs4java.scalace.test.Fold2WhileTest
EXPECTED :
	Compiled from "simpleFoldRight.scala"
	public class simpleFoldRight extends java.lang.Object implements scala.ScalaObject{
	public void invoke();
	  Code:
	   0:	bipush	10
	   2:	newarray double
	   4:	astore_1
	   5:	aload_1
	   6:	astore_2
	   7:	aload_2
	   8:	arraylength
	   9:	istore_3
	   10:	iload_3
	   11:	istore	4
	   13:	iload	4
	   15:	iconst_0
	   16:	if_icmple	28
	   19:	iload	4
	   21:	iconst_1
	   22:	isub
	   23:	istore	4
	   25:	goto	13
	   28:	return
	
	public simpleFoldRight();
	  Code:
	   0:	aload_0
	   1:	invokespecial	; //Method java/lang/Object."<init>":()V
	   4:	return
	
	}
	
	
FOUND :
	Compiled from "simpleFoldRight.scala"
	public class simpleFoldRight extends java.lang.Object implements scala.ScalaObject{
	public void invoke();
	  Code:
	   0:	bipush	10
	   2:	newarray double
	   4:	astore_1
	   5:	getstatic	; //Field scala/Predef$.MODULE$:Lscala/Predef$;
	   8:	aload_1
	   9:	invokevirtual	; //Method scala/Predef$.doubleArrayOps:([D)Lscala/collection/mutable/ArrayOps;
	   12:	dconst_0
	   13:	invokestatic	; //Method scala/runtime/BoxesRunTime.boxToDouble:(D)Ljava/lang/Double;
	   16:	new	; //class simpleFoldRight$$anonfun$1
	   19:	dup
	   20:	aload_0
	   21:	invokespecial	; //Method simpleFoldRight$$anonfun$1."<init>":(LsimpleFoldRight;)V
	   24:	invokeinterface	,  3; //InterfaceMethod scala/collection/IndexedSeqOptimized.foldRight:(Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
	   29:	pop
	   30:	return
	
	public simpleFoldRight();
	  Code:
	   0:	aload_0
	   1:	invokespecial	; //Method java/lang/Object."<init>":()V
	   4:	return
	
	}
	
	
Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 3.032 sec <<< FAILURE!
Running com.nativelibs4java.scalace.test.IntRangeForeach2WhileTest
EXPECTED :
	Compiled from "simpleRangeFilter.scala"
	public class simpleRangeFilter extends java.lang.Object implements scala.ScalaObject{
	public void invoke();
	  Code:
	   0:	iconst_0
	   1:	istore_2
	   2:	new	; //class scala/collection/immutable/VectorBuilder
	   5:	dup
	   6:	invokespecial	; //Method scala/collection/immutable/VectorBuilder."<init>":()V
	   9:	astore_3
	   10:	iload_2
	   11:	bipush	100
	   13:	if_icmpge	46
	   16:	iload_2
	   17:	istore_1
	   18:	iload_1
	   19:	bipush	50
	   21:	if_icmpeq	35
	   24:	aload_3
	   25:	iload_1
	   26:	invokestatic	; //Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
	   29:	invokevirtual	; //Method scala/collection/immutable/VectorBuilder.$plus$eq:(Ljava/lang/Object;)Lscala/collection/immutable/VectorBuilder;
	   32:	goto	38
	   35:	getstatic	; //Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
	   38:	pop
	   39:	iload_2
	   40:	iconst_1
	   41:	iadd
	   42:	istore_2
	   43:	goto	10
	   46:	aload_3
	   47:	invokevirtual	; //Method scala/collection/immutable/VectorBuilder.result:()Lscala/collection/immutable/Vector;
	   50:	pop
	   51:	return
	
	public simpleRangeFilter();
	  Code:
	   0:	aload_0
	   1:	invokespecial	; //Method java/lang/Object."<init>":()V
	   4:	return
	
	}
	
	
FOUND :
	Compiled from "simpleRangeFilter.scala"
	public class simpleRangeFilter extends java.lang.Object implements scala.ScalaObject{
	public void invoke();
	  Code:
	   0:	iconst_0
	   1:	istore_2
	   2:	new	; //class scala/collection/immutable/VectorBuilder
	   5:	dup
	   6:	invokespecial	; //Method scala/collection/immutable/VectorBuilder."<init>":()V
	   9:	astore_3
	   10:	iload_2
	   11:	bipush	100
	   13:	if_icmpge	40
	   16:	iload_2
	   17:	istore_1
	   18:	iload_1
	   19:	bipush	50
	   21:	if_icmpeq	33
	   24:	aload_3
	   25:	iload_1
	   26:	invokestatic	; //Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
	   29:	invokevirtual	; //Method scala/collection/immutable/VectorBuilder.$plus$eq:(Ljava/lang/Object;)Lscala/collection/immutable/VectorBuilder;
	   32:	pop
	   33:	iload_2
	   34:	iconst_1
	   35:	iadd
	   36:	istore_2
	   37:	goto	10
	   40:	aload_3
	   41:	invokevirtual	; //Method scala/collection/immutable/VectorBuilder.result:()Lscala/collection/immutable/Vector;
	   44:	pop
	   45:	return
	
	public simpleRangeFilter();
	  Code:
	   0:	aload_0
	   1:	invokespecial	; //Method java/lang/Object."<init>":()V
	   4:	return
	
	}
	
	
Tests run: 11, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 18.569 sec <<< FAILURE!
Running com.nativelibs4java.scalace.test.ListChainedPerformanceTest
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForall, n = 2, cold]   OK (5.501587301587302x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForall, n = 2, warm] ERROR: only 0.6036036036036037x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForall, n = 10, cold]   OK (1.123456790123457x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForall, n = 10, warm]   OK (1.152542372881356x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForall, n = 1000, cold]   OK (2.734653465346535x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForall, n = 1000, warm]   OK (2.8609271523178808x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForall, n = 100000, cold]   OK (3.459527824620573x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForall, n = 100000, warm]   OK (10.59349593495935x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleExists, n = 2, cold]   OK (5.65886287625418x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleExists, n = 2, warm]   OK (1.3986013986013985x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleExists, n = 10, cold]   OK (1.1891891891891893x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleExists, n = 10, warm]   OK (1.616x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleExists, n = 1000, cold]   OK (2.633744855967078x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleExists, n = 1000, warm]   OK (3.265151515151515x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleExists, n = 100000, cold]   OK (3.508349146110057x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleExists, n = 100000, warm]   OK (10.44029244516653x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToArray, n = 2, cold]   OK (3.5831202046035804x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToArray, n = 2, warm]   OK (1.640625x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToArray, n = 10, cold]   OK (1.0436363636363637x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToArray, n = 10, warm]   OK (1.5037593984962405x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToArray, n = 1000, cold]   OK (1.2296601441812565x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToArray, n = 1000, warm]   OK (2.1497584541062804x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToArray, n = 100000, cold]   OK (1.3447770567301653x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToArray, n = 100000, warm]   OK (3.3111404087013843x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToList, n = 2, cold]   OK (3.575x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToList, n = 2, warm]   OK (1.330827067669173x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToList, n = 10, cold]   OK (1.140625x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToList, n = 10, warm]   OK (1.6036036036036037x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToList, n = 1000, cold]   OK (1.1524390243902438x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToList, n = 1000, warm]   OK (2.023696682464455x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToList, n = 100000, cold]   OK (1.008468595624559x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToList, n = 100000, warm]   OK (1.9675253708040594x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilter, n = 2, cold]   OK (5.754716981132075x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilter, n = 2, warm]   OK (1.606837606837607x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilter, n = 10, cold] ERROR: only 0.9446494464944649x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilter, n = 10, warm]   OK (1.7459016393442623x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilter, n = 1000, cold]   OK (1.7623873873873874x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilter, n = 1000, warm]   OK (2.4486486486486485x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilter, n = 100000, cold]   OK (1.9760151085930122x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilter, n = 100000, warm]   OK (3.528567832871885x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilterNot, n = 2, cold]   OK (4.5570291777188325x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilterNot, n = 2, warm]   OK (1.523076923076923x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilterNot, n = 10, cold]   OK (1.2781954887218046x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilterNot, n = 10, warm]   OK (1.4462809917355373x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilterNot, n = 1000, cold]   OK (1.4827586206896552x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilterNot, n = 1000, warm]   OK (1.815217391304348x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilterNot, n = 100000, cold]   OK (1.5180429623318932x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilterNot, n = 100000, warm]   OK (2.946443239691145x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleCount, n = 2, cold]   OK (6.689230769230769x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleCount, n = 2, warm]   OK (1.375x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleCount, n = 10, cold]   OK (1.3347457627118644x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleCount, n = 10, warm]   OK (1.75x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleCount, n = 1000, cold]   OK (2.181712962962963x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleCount, n = 1000, warm]   OK (2.1559633027522938x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleCount, n = 100000, cold]   OK (3.33373063170441x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleCount, n = 100000, warm]   OK (3.6200212426978227x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleTakeWhile, n = 2, cold]   OK (4.558265582655826x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleTakeWhile, n = 2, warm] ERROR: only 0.5862068965517241x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleTakeWhile, n = 10, cold]   OK (1.2925764192139737x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleTakeWhile, n = 10, warm] ERROR: only 0.923469387755102x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleTakeWhile, n = 1000, cold]   OK (3.323529411764706x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleTakeWhile, n = 1000, warm]   OK (2.883720930232558x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleTakeWhile, n = 100000, cold]   OK (3.059930795847751x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleTakeWhile, n = 100000, warm]   OK (7.715126545026486x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleDropWhile, n = 2, cold]   OK (4.72543352601156x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleDropWhile, n = 2, warm]   OK (1.5333333333333334x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleDropWhile, n = 10, cold] ERROR: only 0.9033333333333333x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleDropWhile, n = 10, warm]   OK (1.448x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleDropWhile, n = 1000, cold]   OK (1.5975855130784709x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleDropWhile, n = 1000, warm]   OK (2.2233502538071064x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleDropWhile, n = 100000, cold]   OK (1.38530990727184x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleDropWhile, n = 100000, warm]   OK (2.4362698261035733x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForeach, n = 2, cold]   OK (5.295819935691318x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForeach, n = 2, warm]   OK (1.5869565217391304x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForeach, n = 10, cold]   OK (1.5159817351598173x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForeach, n = 10, warm]   OK (1.5073529411764706x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForeach, n = 1000, cold]   OK (1.6618705035971224x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForeach, n = 1000, warm]   OK (1.9188034188034189x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForeach, n = 100000, cold]   OK (2.3289765175011077x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForeach, n = 100000, warm]   OK (3.672067901234568x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMap, n = 2, cold]   OK (4.502923976608187x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMap, n = 2, warm]   OK (1.416x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMap, n = 10, cold]   OK (1.23109243697479x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMap, n = 10, warm]   OK (1.6666666666666667x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMap, n = 1000, cold]   OK (1.4682926829268292x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMap, n = 1000, warm]   OK (2.1272727272727274x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMap, n = 100000, cold]   OK (1.3974670059773924x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMap, n = 100000, warm]   OK (2.7570671378091873x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleSum, n = 2, cold]   OK (4.215873015873016x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleSum, n = 2, warm]   OK (1.782258064516129x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleSum, n = 10, cold]   OK (1.420353982300885x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleSum, n = 10, warm]   OK (1.3098591549295775x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleSum, n = 1000, cold]   OK (1.43024494142705x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleSum, n = 1000, warm]   OK (1.7956521739130435x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleSum, n = 100000, cold]   OK (2.391414432040511x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleSum, n = 100000, warm]   OK (3.9362962962962964x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleProduct, n = 2, cold]   OK (5.714788732394366x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleProduct, n = 2, warm]   OK (1.6131386861313868x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleProduct, n = 10, cold]   OK (1.3738738738738738x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleProduct, n = 10, warm]   OK (1.0476190476190477x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleProduct, n = 1000, cold]   OK (1.515625x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleProduct, n = 1000, warm]   OK (2.144186046511628x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleProduct, n = 100000, cold]   OK (2.1961989938513136x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleProduct, n = 100000, warm]   OK (3.7569444444444446x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMin, n = 2, cold]   OK (3.742857142857143x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMin, n = 2, warm]   OK (1.7727272727272727x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMin, n = 10, cold]   OK (1.2217391304347827x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMin, n = 10, warm]   OK (1.6417910447761195x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMin, n = 1000, cold]   OK (1.3326592517694642x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMin, n = 1000, warm]   OK (2.343137254901961x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMin, n = 100000, cold]   OK (2.2029220779220777x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMin, n = 100000, warm]   OK (3.790623335109217x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMax, n = 2, cold]   OK (4.27639751552795x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMax, n = 2, warm]   OK (1.4685314685314685x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMax, n = 10, cold]   OK (1.2531120331950207x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMax, n = 10, warm]   OK (1.5887096774193548x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMax, n = 1000, cold]   OK (1.4939226519337017x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMax, n = 1000, warm]   OK (1.550420168067227x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMax, n = 100000, cold]   OK (2.081578947368421x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMax, n = 100000, warm]   OK (3.60025641025641x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleScanLeft, n = 2, cold]   OK (3.874186550976139x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleScanLeft, n = 2, warm]   OK (1.5813953488372092x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleScanLeft, n = 10, cold]   OK (1.5019455252918288x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleScanLeft, n = 10, warm]   OK (2.1219512195121952x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleScanLeft, n = 1000, cold]   OK (1.4780564263322884x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleScanLeft, n = 1000, warm]   OK (1.9868995633187774x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleScanLeft, n = 100000, cold]   OK (1.9547169811320755x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleScanLeft, n = 100000, warm]   OK (3.254095238095238x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFoldLeft, n = 2, cold]   OK (5.305555555555555x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFoldLeft, n = 2, warm]   OK (1.6589147286821706x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFoldLeft, n = 10, cold]   OK (1.317391304347826x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFoldLeft, n = 10, warm]   OK (1.3x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFoldLeft, n = 1000, cold]   OK (1.6714727085478889x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFoldLeft, n = 1000, warm]   OK (2.1083743842364533x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFoldLeft, n = 100000, cold]   OK (2.7639525320173894x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFoldLeft, n = 100000, warm]   OK (3.826481715006305x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleReduceLeft, n = 2, cold]   OK (5.836734693877551x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleReduceLeft, n = 2, warm]   OK (1.5648854961832062x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleReduceLeft, n = 10, cold]   OK (1.2477064220183487x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleReduceLeft, n = 10, warm]   OK (1.7076923076923076x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleReduceLeft, n = 1000, cold]   OK (1.604898828541001x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleReduceLeft, n = 1000, warm]   OK (2.1036036036036037x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleReduceLeft, n = 100000, cold]   OK (2.6840849439274637x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleReduceLeft, n = 100000, warm]   OK (3.990193407790793x faster, expected > 0.95x)

Tests run: 18, Failures: 4, Errors: 0, Skipped: 0, Time elapsed: 213.418 sec <<< FAILURE!
Running com.nativelibs4java.scalace.test.ListLoopsRewriteTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec
Running com.nativelibs4java.scalace.test.ListPerformanceTest
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForall, n = 2, cold]   OK (1.0263157894736843x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForall, n = 2, warm]   OK (0.9821428571428571x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForall, n = 10, cold]   OK (1.1415929203539823x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForall, n = 10, warm] ERROR: only 0.9352941176470588x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForall, n = 1000, cold]   OK (1.014684287812041x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForall, n = 1000, warm]   OK (0.9859154929577465x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForall, n = 100000, cold] ERROR: only 0.9442573887018332x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForall, n = 100000, warm]   OK (1.0209222886421863x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleExists, n = 2, cold]   OK (1.0804721030042919x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleExists, n = 2, warm]   OK (1.0536912751677852x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleExists, n = 10, cold]   OK (1.0186915887850467x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleExists, n = 10, warm]   OK (1.051948051948052x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleExists, n = 1000, cold] ERROR: only 0.9490254872563718x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleExists, n = 1000, warm]   OK (1.09375x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleExists, n = 100000, cold]   OK (1.0113613308987623x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleExists, n = 100000, warm]   OK (1.0512820512820513x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToArray, n = 2, cold] ERROR: only 0.6779661016949152x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToArray, n = 2, warm]   OK (0.9588235294117647x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToArray, n = 10, cold]   OK (0.9551020408163265x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToArray, n = 10, warm] ERROR: only 0.8641304347826086x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToArray, n = 1000, cold] ERROR: only 0.9244712990936556x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToArray, n = 1000, warm] ERROR: only 0.9046153846153846x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToArray, n = 100000, cold] ERROR: only 0.92644666511736x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToArray, n = 100000, warm]   OK (1.0027023375219566x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToList, n = 2, cold]   OK (1.0673076923076923x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToList, n = 2, warm]   OK (1.0909090909090908x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToList, n = 10, cold]   OK (1.0564971751412429x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToList, n = 10, warm]   OK (0.9523809523809523x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToList, n = 1000, cold]   OK (0.9558011049723757x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToList, n = 1000, warm]   OK (1.0x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToList, n = 100000, cold]   OK (1.0134357005758157x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleToList, n = 100000, warm]   OK (0.950354609929078x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilter, n = 2, cold]   OK (1.381151832460733x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilter, n = 2, warm]   OK (1.0368098159509203x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilter, n = 10, cold] ERROR: only 0.9135802469135802x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilter, n = 10, warm]   OK (1.1x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilter, n = 1000, cold] ERROR: only 0.9477064220183486x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilter, n = 1000, warm] ERROR: only 0.8985074626865671x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilter, n = 100000, cold] ERROR: only 0.926497277676951x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilter, n = 100000, warm]   OK (1.0482900337589902x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilterNot, n = 2, cold]   OK (0.9849785407725322x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilterNot, n = 2, warm]   OK (1.0440251572327044x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilterNot, n = 10, cold] ERROR: only 0.8417508417508418x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilterNot, n = 10, warm] ERROR: only 0.9302325581395349x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilterNot, n = 1000, cold]   OK (1.0643171806167402x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilterNot, n = 1000, warm] ERROR: only 0.8885448916408669x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilterNot, n = 100000, cold]   OK (1.0116381590548404x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFilterNot, n = 100000, warm]   OK (0.9896230410842863x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleCount, n = 2, cold] ERROR: only 0.5024711696869851x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleCount, n = 2, warm] ERROR: only 0.8941176470588236x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleCount, n = 10, cold]   OK (0.9859649122807017x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleCount, n = 10, warm]   OK (1.0849673202614378x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleCount, n = 1000, cold]   OK (1.0806223479490806x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleCount, n = 1000, warm]   OK (0.9623430962343096x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleCount, n = 100000, cold]   OK (0.9812909260991581x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleCount, n = 100000, warm] ERROR: only 0.9387071851661086x faster (expected >= 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleTakeWhile, n = 2, cold]   OK (1.0299785867237687x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleTakeWhile, n = 2, warm]   OK (1.0742857142857143x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleTakeWhile, n = 10, cold]   OK (1.0711111111111111x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleTakeWhile, n = 10, warm] ERROR: only 0.9457831325301205x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleTakeWhile, n = 1000, cold]   OK (0.95x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleTakeWhile, n = 1000, warm]   OK (0.9736842105263158x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleTakeWhile, n = 100000, cold]   OK (0.9680981595092024x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleTakeWhile, n = 100000, warm]   OK (0.9832695984703633x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleDropWhile, n = 2, cold]   OK (1.2059732234809475x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleDropWhile, n = 2, warm]   OK (0.9753086419753086x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleDropWhile, n = 10, cold]   OK (1.1271186440677967x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleDropWhile, n = 10, warm] ERROR: only 0.9202453987730062x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleDropWhile, n = 1000, cold]   OK (1.0783410138248848x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleDropWhile, n = 1000, warm]   OK (1.1055276381909547x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleDropWhile, n = 100000, cold] ERROR: only 0.9308250048990789x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleDropWhile, n = 100000, warm]   OK (0.9868583162217659x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForeach, n = 2, cold] ERROR: only 0.836873406966865x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForeach, n = 2, warm]   OK (1.1437125748502994x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForeach, n = 10, cold]   OK (1.1284046692607004x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForeach, n = 10, warm]   OK (1.0797546012269938x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForeach, n = 1000, cold]   OK (0.964562569213732x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForeach, n = 1000, warm]   OK (1.0901960784313725x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForeach, n = 100000, cold]   OK (1.0316465863453814x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleForeach, n = 100000, warm]   OK (1.0637688082159065x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMap, n = 2, cold]   OK (1.0113052415210688x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMap, n = 2, warm]   OK (0.9746835443037974x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMap, n = 10, cold]   OK (1.0887096774193548x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMap, n = 10, warm] ERROR: only 0.9016393442622951x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMap, n = 1000, cold]   OK (0.9640102827763496x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMap, n = 1000, warm]   OK (1.2387543252595157x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMap, n = 100000, cold]   OK (1.0071942446043165x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMap, n = 100000, warm]   OK (1.0010543580131208x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleSum, n = 2, cold]   OK (0.9611111111111111x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleSum, n = 2, warm]   OK (1.0164835164835164x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleSum, n = 10, cold]   OK (1.1478260869565218x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleSum, n = 10, warm]   OK (0.9787234042553191x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleSum, n = 1000, cold]   OK (1.2145110410094637x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleSum, n = 1000, warm]   OK (0.9808917197452229x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleSum, n = 100000, cold]   OK (1.1536355859709153x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleSum, n = 100000, warm]   OK (0.9950018511662347x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleProduct, n = 2, cold]   OK (1.27217125382263x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleProduct, n = 2, warm]   OK (0.9611111111111111x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleProduct, n = 10, cold]   OK (1.045267489711934x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleProduct, n = 10, warm]   OK (1.0691489361702127x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleProduct, n = 1000, cold]   OK (1.2032258064516128x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleProduct, n = 1000, warm]   OK (1.126923076923077x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleProduct, n = 100000, cold]   OK (1.0789818454052031x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleProduct, n = 100000, warm] ERROR: only 0.9365898617511521x faster (expected >= 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMin, n = 2, cold]   OK (1.2444444444444445x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMin, n = 2, warm] ERROR: only 0.9162303664921466x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMin, n = 10, cold] ERROR: only 0.9461538461538461x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMin, n = 10, warm]   OK (1.0235294117647058x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMin, n = 1000, cold]   OK (1.050314465408805x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMin, n = 1000, warm]   OK (1.0x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMin, n = 100000, cold]   OK (1.0245973008271658x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMin, n = 100000, warm]   OK (1.0034965034965035x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMax, n = 2, cold]   OK (1.0597014925373134x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMax, n = 2, warm] ERROR: only 0.9212121212121213x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMax, n = 10, cold]   OK (0.9912280701754386x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMax, n = 10, warm]   OK (1.0773480662983426x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMax, n = 1000, cold] ERROR: only 0.8673469387755102x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMax, n = 1000, warm]   OK (1.0111940298507462x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMax, n = 100000, cold]   OK (1.0135345018859552x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleMax, n = 100000, warm]   OK (0.9547491039426523x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleScanLeft, n = 2, cold]   OK (1.0629441624365483x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleScanLeft, n = 2, warm]   OK (1.7246376811594204x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleScanLeft, n = 10, cold] ERROR: only 0.8422619047619048x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleScanLeft, n = 10, warm] ERROR: only 0.9426229508196722x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleScanLeft, n = 1000, cold]   OK (1.1335820895522388x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleScanLeft, n = 1000, warm]   OK (1.0154241645244215x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleScanLeft, n = 100000, cold] ERROR: only 0.38989774330042315x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleScanLeft, n = 100000, warm]   OK (1.0377577021079454x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFoldLeft, n = 2, cold]   OK (1.010351966873706x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFoldLeft, n = 2, warm] ERROR: only 0.927710843373494x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFoldLeft, n = 10, cold]   OK (1.0088105726872247x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFoldLeft, n = 10, warm]   OK (1.00625x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFoldLeft, n = 1000, cold]   OK (1.0438047559449313x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFoldLeft, n = 1000, warm]   OK (1.0136054421768708x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFoldLeft, n = 100000, cold] ERROR: only 0.8653730142770963x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleFoldLeft, n = 100000, warm]   OK (0.9869491204842066x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleReduceLeft, n = 2, cold]   OK (1.0593406593406594x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleReduceLeft, n = 2, warm]   OK (1.0240963855421688x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleReduceLeft, n = 10, cold]   OK (0.9620253164556962x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleReduceLeft, n = 10, warm] ERROR: only 0.9392265193370166x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleReduceLeft, n = 1000, cold]   OK (1.029040404040404x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleReduceLeft, n = 1000, warm] ERROR: only 0.9027237354085603x faster (expected >= 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleReduceLeft, n = 100000, cold]   OK (1.13902352523939x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.ListPerformanceTest.simpleReduceLeft, n = 100000, warm]   OK (1.0052044609665427x faster, expected > 0.95x)

Tests run: 18, Failures: 16, Errors: 0, Skipped: 0, Time elapsed: 212.661 sec <<< FAILURE!
Running com.nativelibs4java.scalace.test.MatrixPerformanceTest
[com.nativelibs4java.scalace.test.MatrixPerformanceTest.simpleMatrixTest, n = 100, cold]   OK (1.5895293324060469x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.MatrixPerformanceTest.simpleMatrixTest, n = 100, warm]   OK (31.5961210051232x faster, expected > 0.95x)

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.007 sec
Running com.nativelibs4java.scalace.test.NoChangeTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 7.334 sec
Running com.nativelibs4java.scalace.test.PastBugsTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 14.536 sec
Running com.nativelibs4java.scalace.test.RangeChainedPerformanceTest
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleForall, n = 2, cold]   OK (10.215686274509803x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleForall, n = 2, warm]   OK (2.0277777777777777x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleForall, n = 10, cold]   OK (1.9345794392523366x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleForall, n = 10, warm]   OK (2.106060606060606x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleForall, n = 1000, cold]   OK (5.6075949367088604x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleForall, n = 1000, warm]   OK (3.5107913669064748x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleForall, n = 100000, cold]   OK (9.998633879781421x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleForall, n = 100000, warm]   OK (38.468513853904284x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleExists, n = 2, cold]   OK (9.242718446601941x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleExists, n = 2, warm]   OK (1.9647887323943662x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleExists, n = 10, cold]   OK (2.053658536585366x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleExists, n = 10, warm]   OK (2.4126984126984126x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleExists, n = 1000, cold]   OK (7.0168776371308015x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleExists, n = 1000, warm]   OK (3.406015037593985x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleExists, n = 100000, cold]   OK (9.45929203539823x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleExists, n = 100000, warm]   OK (35.45396145610278x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleToArray, n = 2, cold]   OK (5.976539589442815x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleToArray, n = 2, warm]   OK (2.371900826446281x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleToArray, n = 10, cold]   OK (1.7598425196850394x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleToArray, n = 10, warm]   OK (2.347826086956522x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleToArray, n = 1000, cold]   OK (2.8473282442748094x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleToArray, n = 1000, warm]   OK (4.147058823529412x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleToArray, n = 100000, cold]   OK (3.305074257425743x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleToArray, n = 100000, warm]   OK (8.163807415605977x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleToList, n = 2, cold]   OK (4.586538461538462x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleToList, n = 2, warm]   OK (2.146153846153846x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleToList, n = 10, cold]   OK (1.8151658767772512x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleToList, n = 10, warm]   OK (2.3934426229508197x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleToList, n = 1000, cold]   OK (2.825x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleToList, n = 1000, warm]   OK (3.788732394366197x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleToList, n = 100000, cold]   OK (2.6222121486854033x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleToList, n = 100000, warm]   OK (6.416363636363636x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleFilter, n = 2, cold]   OK (6.496296296296296x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleFilter, n = 2, warm]   OK (3.008771929824561x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleFilter, n = 10, cold]   OK (1.653061224489796x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleFilter, n = 10, warm]   OK (2.0x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleFilter, n = 1000, cold]   OK (2.7864077669902914x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleFilter, n = 1000, warm]   OK (3.871794871794872x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleFilter, n = 100000, cold]   OK (4.533244680851064x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleFilter, n = 100000, warm]   OK (18.424912689173457x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleFilterNot, n = 2, cold]   OK (5.252225519287834x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleFilterNot, n = 2, warm]   OK (2.1746031746031744x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleFilterNot, n = 10, cold]   OK (1.588235294117647x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleFilterNot, n = 10, warm]   OK (2.456x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleFilterNot, n = 1000, cold]   OK (2.5014044943820224x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleFilterNot, n = 1000, warm]   OK (3.0114285714285716x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleFilterNot, n = 100000, cold]   OK (3.19015032533094x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleFilterNot, n = 100000, warm]   OK (8.837837837837839x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleCount, n = 2, cold]   OK (9.536458333333334x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleCount, n = 2, warm]   OK (1.9921875x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleCount, n = 10, cold]   OK (1.8829268292682926x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleCount, n = 10, warm]   OK (1.9776119402985075x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleCount, n = 1000, cold]   OK (4.103448275862069x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleCount, n = 1000, warm]   OK (3.047945205479452x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleCount, n = 100000, cold]   OK (5.70006801178871x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleCount, n = 100000, warm]   OK (20.00925925925926x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleTakeWhile, n = 2, cold]   OK (5.65625x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleTakeWhile, n = 2, warm]   OK (1.950354609929078x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleTakeWhile, n = 10, cold]   OK (1.5x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleTakeWhile, n = 10, warm]   OK (1.8357142857142856x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleTakeWhile, n = 1000, cold]   OK (4.18848167539267x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleTakeWhile, n = 1000, warm]   OK (4.25984251968504x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleTakeWhile, n = 100000, cold]   OK (6.644300518134715x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleTakeWhile, n = 100000, warm]   OK (15.48663101604278x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleDropWhile, n = 2, cold]   OK (7.633663366336633x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleDropWhile, n = 2, warm]   OK (2.3140495867768593x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleDropWhile, n = 10, cold]   OK (1.169054441260745x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleDropWhile, n = 10, warm]   OK (2.274193548387097x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleDropWhile, n = 1000, cold]   OK (3.408348457350272x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleDropWhile, n = 1000, warm]   OK (3.2111111111111112x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleDropWhile, n = 100000, cold]   OK (3.142107284598643x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleDropWhile, n = 100000, warm]   OK (8.846632124352332x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleForeach, n = 2, cold]   OK (9.030303030303031x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleForeach, n = 2, warm]   OK (1.6496815286624205x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleForeach, n = 10, cold]   OK (1.94x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleForeach, n = 10, warm]   OK (2.0324675324675323x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleForeach, n = 1000, cold]   OK (3.1613508442776737x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleForeach, n = 1000, warm]   OK (2.6875x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleForeach, n = 100000, cold]   OK (5.178760654227137x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleForeach, n = 100000, warm]   OK (16.460251046025103x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleMap, n = 2, cold]   OK (4.809659090909091x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleMap, n = 2, warm]   OK (1.6923076923076923x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleMap, n = 10, cold]   OK (1.5458515283842795x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleMap, n = 10, warm]   OK (1.5985915492957747x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleMap, n = 1000, cold]   OK (2.782131661442006x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleMap, n = 1000, warm]   OK (3.8358208955223883x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleMap, n = 100000, cold]   OK (4.065713500137476x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleMap, n = 100000, warm]   OK (9.626488095238095x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleScanLeft, n = 2, cold]   OK (5.45398773006135x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleScanLeft, n = 2, warm]   OK (2.1707317073170733x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleScanLeft, n = 10, cold]   OK (1.63013698630137x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleScanLeft, n = 10, warm]   OK (2.0277777777777777x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleScanLeft, n = 1000, cold]   OK (3.5459662288930582x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleScanLeft, n = 1000, warm]   OK (4.026315789473684x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleScanLeft, n = 100000, cold]   OK (3.158275748601514x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleScanLeft, n = 100000, warm]   OK (8.071659731853906x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleFoldLeft, n = 2, cold]   OK (9.097435897435897x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleFoldLeft, n = 2, warm]   OK (1.7633587786259541x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleFoldLeft, n = 10, cold]   OK (1.5792079207920793x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleFoldLeft, n = 10, warm]   OK (1.9754098360655739x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleFoldLeft, n = 1000, cold]   OK (3.9042316258351892x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleFoldLeft, n = 1000, warm]   OK (4.27972027972028x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleFoldLeft, n = 100000, cold]   OK (5.889409559512652x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleFoldLeft, n = 100000, warm]   OK (23.903713892709767x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleReduceLeft, n = 2, cold]   OK (12.763440860215054x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleReduceLeft, n = 2, warm]   OK (1.9583333333333333x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleReduceLeft, n = 10, cold]   OK (1.811659192825112x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleReduceLeft, n = 10, warm]   OK (2.452991452991453x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleReduceLeft, n = 1000, cold]   OK (4.366812227074236x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleReduceLeft, n = 1000, warm]   OK (5.468253968253968x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleReduceLeft, n = 100000, cold]   OK (6.655824508320726x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.simpleReduceLeft, n = 100000, warm]   OK (16.782340862423x faster, expected > 0.95x)

Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 164.05 sec
Running com.nativelibs4java.scalace.test.RangePerformanceTest
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleForall, n = 2, cold]   OK (5.271844660194175x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleForall, n = 2, warm]   OK (1.646153846153846x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleForall, n = 10, cold]   OK (1.4299065420560748x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleForall, n = 10, warm]   OK (2.1818181818181817x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleForall, n = 1000, cold]   OK (2.819095477386935x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleForall, n = 1000, warm]   OK (2.2635135135135136x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleForall, n = 100000, cold]   OK (5.011526370939574x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleForall, n = 100000, warm]   OK (24.585714285714285x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleExists, n = 2, cold]   OK (5.28643216080402x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleExists, n = 2, warm]   OK (1.4785714285714286x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleExists, n = 10, cold]   OK (1.6057142857142856x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleExists, n = 10, warm]   OK (1.7753623188405796x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleExists, n = 1000, cold]   OK (2.145348837209302x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleExists, n = 1000, warm]   OK (2.0x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleExists, n = 100000, cold]   OK (3.891025641025641x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleExists, n = 100000, warm]   OK (22.88888888888889x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleFilter, n = 2, cold]   OK (2.797142857142857x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleFilter, n = 2, warm]   OK (1.2575757575757576x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleFilter, n = 10, cold]   OK (1.1101321585903083x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleFilter, n = 10, warm]   OK (1.62015503875969x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleFilter, n = 1000, cold]   OK (1.7320872274143302x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleFilter, n = 1000, warm]   OK (2.911602209944751x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleFilter, n = 100000, cold]   OK (1.2778315585672797x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleFilter, n = 100000, warm]   OK (4.118334179786694x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleFilterNot, n = 2, cold]   OK (3.383177570093458x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleFilterNot, n = 2, warm]   OK (1.4137931034482758x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleFilterNot, n = 10, cold]   OK (1.1487603305785123x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleFilterNot, n = 10, warm]   OK (1.5539568345323742x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleFilterNot, n = 1000, cold]   OK (2.011686143572621x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleFilterNot, n = 1000, warm]   OK (2.8120805369127515x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleFilterNot, n = 100000, cold]   OK (1.6991786447638604x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleFilterNot, n = 100000, warm]   OK (5.176529588766299x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleCount, n = 2, cold]   OK (4.611650485436893x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleCount, n = 2, warm]   OK (1.3767123287671232x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleCount, n = 10, cold]   OK (1.421875x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleCount, n = 10, warm]   OK (1.3591549295774648x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleCount, n = 1000, cold]   OK (2.935420743639922x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleCount, n = 1000, warm]   OK (2.0779220779220777x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleCount, n = 100000, cold]   OK (2.486195472114854x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleCount, n = 100000, warm]   OK (6.089285714285714x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleForeach, n = 2, cold]   OK (1.7272727272727273x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleForeach, n = 2, warm]   OK (1.0939597315436242x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleForeach, n = 10, cold]   OK (1.1791044776119404x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleForeach, n = 10, warm]   OK (1.9342105263157894x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleForeach, n = 1000, cold]   OK (1.3698296836982968x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleForeach, n = 1000, warm]   OK (1.0063291139240507x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleForeach, n = 100000, cold]   OK (1.217311795184395x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleForeach, n = 100000, warm]   OK (2.159250585480094x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleMap, n = 2, cold]   OK (3.5170068027210886x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleMap, n = 2, warm]   OK (1.6343283582089552x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleMap, n = 10, cold]   OK (1.2488262910798122x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleMap, n = 10, warm]   OK (2.2905405405405403x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleMap, n = 1000, cold]   OK (1.3756097560975609x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleMap, n = 1000, warm]   OK (1.9533678756476685x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleMap, n = 100000, cold]   OK (1.7511510387422795x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleMap, n = 100000, warm]   OK (3.7480916030534353x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleScanLeft, n = 2, cold]   OK (3.1517857142857144x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleScanLeft, n = 2, warm]   OK (1.9398496240601504x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleScanLeft, n = 10, cold]   OK (1.4232365145228216x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleScanLeft, n = 10, warm]   OK (1.6462585034013606x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleScanLeft, n = 1000, cold]   OK (2.041322314049587x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleScanLeft, n = 1000, warm]   OK (2.405128205128205x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleScanLeft, n = 100000, cold]   OK (1.5928785100839524x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleScanLeft, n = 100000, warm]   OK (2.5828891257995736x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleFoldLeft, n = 2, cold]   OK (5.130653266331659x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleFoldLeft, n = 2, warm]   OK (1.3722627737226278x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleFoldLeft, n = 10, cold]   OK (1.6756756756756757x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleFoldLeft, n = 10, warm]   OK (1.4755244755244756x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleFoldLeft, n = 1000, cold]   OK (2.0870712401055407x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleFoldLeft, n = 1000, warm]   OK (2.4130434782608696x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleFoldLeft, n = 100000, cold]   OK (4.389703375383566x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleFoldLeft, n = 100000, warm]   OK (25.063444108761328x faster, expected > 0.95x)

[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleReduceLeft, n = 2, cold]   OK (5.767195767195767x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleReduceLeft, n = 2, warm]   OK (1.457142857142857x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleReduceLeft, n = 10, cold]   OK (1.5902439024390245x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleReduceLeft, n = 10, warm]   OK (1.8248175182481752x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleReduceLeft, n = 1000, cold]   OK (3.792452830188679x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleReduceLeft, n = 1000, warm]   OK (2.5x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleReduceLeft, n = 100000, cold]   OK (2.5995180722891567x faster, expected > 0.95x)
[com.nativelibs4java.scalace.test.RangePerformanceTest.simpleReduceLeft, n = 100000, warm]   OK (20.5906432748538x faster, expected > 0.95x)

Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 116.122 sec
Running com.nativelibs4java.scalace.test.Reduce2WhileTest
EXPECTED :
	Compiled from "simpleReduceRight.scala"
	public class simpleReduceRight extends java.lang.Object implements scala.ScalaObject{
	public void invoke();
	  Code:
	   0:	bipush	10
	   2:	newarray double
	   4:	astore_1
	   5:	aload_1
	   6:	astore_2
	   7:	aload_2
	   8:	arraylength
	   9:	istore_3
	   10:	iload_3
	   11:	istore	4
	   13:	iconst_0
	   14:	istore	5
	   16:	iload	4
	   18:	iconst_0
	   19:	if_icmple	42
	   22:	iload	4
	   24:	iconst_1
	   25:	isub
	   26:	istore	4
	   28:	iload	5
	   30:	ifeq	36
	   33:	goto	16
	   36:	iconst_1
	   37:	istore	5
	   39:	goto	16
	   42:	iload	5
	   44:	ifeq	48
	   47:	return
	   48:	new	; //class java/lang/ArrayIndexOutOfBoundsException
	   51:	dup
	   52:	iconst_0
	   53:	invokespecial	; //Method java/lang/ArrayIndexOutOfBoundsException."<init>":(I)V
	   56:	athrow
	
	public simpleReduceRight();
	  Code:
	   0:	aload_0
	   1:	invokespecial	; //Method java/lang/Object."<init>":()V
	   4:	return
	
	}
	
	
FOUND :
	Compiled from "simpleReduceRight.scala"
	public class simpleReduceRight extends java.lang.Object implements scala.ScalaObject{
	public void invoke();
	  Code:
	   0:	bipush	10
	   2:	newarray double
	   4:	astore_1
	   5:	getstatic	; //Field scala/Predef$.MODULE$:Lscala/Predef$;
	   8:	aload_1
	   9:	invokevirtual	; //Method scala/Predef$.doubleArrayOps:([D)Lscala/collection/mutable/ArrayOps;
	   12:	new	; //class simpleReduceRight$$anonfun$1
	   15:	dup
	   16:	aload_0
	   17:	invokespecial	; //Method simpleReduceRight$$anonfun$1."<init>":(LsimpleReduceRight;)V
	   20:	invokeinterface	,  2; //InterfaceMethod scala/collection/IndexedSeqOptimized.reduceRight:(Lscala/Function2;)Ljava/lang/Object;
	   25:	pop
	   26:	return
	
	public simpleReduceRight();
	  Code:
	   0:	aload_0
	   1:	invokespecial	; //Method java/lang/Object."<init>":()V
	   4:	return
	
	}
	
	
Tests run: 6, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 9.604 sec <<< FAILURE!
Running com.nativelibs4java.scalace.test.Scan2WhileTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.36 sec
Running com.nativelibs4java.scalace.test.SideEffectsTest
Tests run: 4, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.954 sec <<< FAILURE!

Results :

Failed tests: 
  simpleScanRight(com.nativelibs4java.scalace.test.ArrayChainedPerformanceTest): ERROR: only 0.8986917793257445x faster (expected >= 0.95x)
  simpleToArray(com.nativelibs4java.scalace.test.ArrayPerformanceTest): ERROR: only 0.5845410628019324x faster (expected >= 0.95x)
ERROR: only 0.15493683939159578x faster (expected >= 0.95x)
ERROR: only 0.20473372781065088x faster (expected >= 0.95x)
  simpleToList(com.nativelibs4java.scalace.test.ArrayPerformanceTest): ERROR: only 0.9304347826086956x faster (expected >= 0.95x)
ERROR: only 0.7145015105740181x faster (expected >= 0.95x)
  simpleProduct(com.nativelibs4java.scalace.test.ArrayPerformanceTest): ERROR: only 0.9485981308411215x faster (expected >= 0.95x)
  simpleScanRight(com.nativelibs4java.scalace.test.ArrayPerformanceTest): ERROR: only 0.9408866995073891x faster (expected >= 0.95x)
ERROR: only 0.7776826755428753x faster (expected >= 0.95x)
  simpleFoldRight(com.nativelibs4java.scalace.test.ArrayPerformanceTest): ERROR: only 0.9458483754512635x faster (expected >= 0.95x)
ERROR: only 0.9454238106737503x faster (expected >= 0.95x)
ERROR: only 0.9483644228169775x faster (expected >= 0.95x)
  simpleReduceRight(com.nativelibs4java.scalace.test.ArrayPerformanceTest): ERROR: only 0.9052631578947369x faster (expected >= 0.95x)
ERROR: only 0.8518057285180572x faster (expected >= 0.95x)
ERROR: only 0.8952702702702703x faster (expected >= 0.95x)
  simplePrimitiveArrayFilter(com.nativelibs4java.scalace.test.Filter2WhileTest): expected:<...2
   49:	if_icmpge	8[7
   52:	aload_3
   53:	iload	5
   55:	iaload
   56:	istore	4
   58:	iload	4
   60:	iconst_0
   61:	if_icmpeq	74
   64:	aload	6
   66:	iload	4
   68:	invokevirtual	; //Method scala/collection/mutable/ArrayBuilder$ofInt.$plus$eq:(I)Lscala/collection/mutable/ArrayBuilder$ofInt;
   71:	goto	77
   74:	getstatic	; //Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
   77:	pop
   78:	iload	5
   80:	iconst_1
   81:	iadd
   82:	istore	5
   84:	goto	46
   87:	aload	6
   89:	invokevirtual	; //Method scala/collection/mutable/ArrayBuilder$ofInt.result:()[I
   92:	pop
   93]:	return

public sim...> but was:<...2
   49:	if_icmpge	8[1
   52:	aload_3
   53:	iload	5
   55:	iaload
   56:	istore	4
   58:	iload	4
   60:	iconst_0
   61:	if_icmpeq	72
   64:	aload	6
   66:	iload	4
   68:	invokevirtual	; //Method scala/collection/mutable/ArrayBuilder$ofInt.$plus$eq:(I)Lscala/collection/mutable/ArrayBuilder$ofInt;
   71:	pop
   72:	iload	5
   74:	iconst_1
   75:	iadd
   76:	istore	5
   78:	goto	46
   81:	aload	6
   83:	invokevirtual	; //Method scala/collection/mutable/ArrayBuilder$ofInt.result:()[I
   86:	pop
   87]:	return

public sim...>
  simpleRefArrayFilter(com.nativelibs4java.scalace.test.Filter2WhileTest): expected:<...2
   59:	if_icmpge	1[14
   62:	aload_3
   63:	iload	5
   65:	aaload
   66:	astore	4
   68:	aload	4
   70:	dup
   71:	ifnonnull	83
   74:	pop
   75:	ldc	; //String 
   77:	ifnull	91
   80:	goto	97
   83:	ldc	; //String 
   85:	invokevirtual	; //Method java/lang/Object.equals:(Ljava/lang/Object;)Z
   88:	ifeq	97
   91:	getstatic	; //Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
   94:	goto	104
   97:	aload	6
   99:	aload	4
   101:	invokevirtual	; //Method scala/collection/mutable/ArrayBuilder$ofRef.$plus$eq:(Ljava/lang/Object;)Lscala/collection/mutable/ArrayBuilder$ofRef;
   104:	pop
   105:	iload	5
   107:	iconst_1
   108:	iadd
   109:	istore	5
   111:	goto	56
   114:	aload	6
   116:	invokevirtual	; //Method scala/collection/mutable/ArrayBuilder$ofRef.result:()[Ljava/lang/Object;
   119:	pop
   120]:	return

public sim...> but was:<...2
   59:	if_icmpge	1[08
   62:	aload_3
   63:	iload	5
   65:	aaload
   66:	astore	4
   68:	aload	4
   70:	dup
   71:	ifnonnull	83
   74:	pop
   75:	ldc	; //String 
   77:	ifnull	99
   80:	goto	91
   83:	ldc	; //String 
   85:	invokevirtual	; //Method java/lang/Object.equals:(Ljava/lang/Object;)Z
   88:	ifne	99
   91:	aload	6
   93:	aload	4
   95:	invokevirtual	; //Method scala/collection/mutable/ArrayBuilder$ofRef.$plus$eq:(Ljava/lang/Object;)Lscala/collection/mutable/ArrayBuilder$ofRef;
   98:	pop
   99:	iload	5
   101:	iconst_1
   102:	iadd
   103:	istore	5
   105:	goto	56
   108:	aload	6
   110:	invokevirtual	; //Method scala/collection/mutable/ArrayBuilder$ofRef.result:()[Ljava/lang/Object;
   113:	pop
   114]:	return

public sim...>
  tupleArrayFilter(com.nativelibs4java.scalace.test.Filter2WhileTest): expected:<...
   108:	if_icmpge	1[50
   111:	aload_3
   112:	iload	5
   114:	aaload
   115:	astore	4
   117:	aload	4
   119:	invokevirtual	; //Method scala/Tuple2._1$mcI$sp:()I
   122:	bipush	30
   124:	if_icmpge	137
   127:	aload	6
   129:	aload	4
   131:	invokevirtual	; //Method scala/collection/mutable/ArrayBuilder$ofRef.$plus$eq:(Ljava/lang/Object;)Lscala/collection/mutable/ArrayBuilder$ofRef;
   134:	goto	140
   137:	getstatic	; //Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
   140:	pop
   141:	iload	5
   143:	iconst_1
   144:	iadd
   145:	istore	5
   147:	goto	105
   150:	aload	6
   152:	invokevirtual	; //Method scala/collection/mutable/ArrayBuilder$ofRef.result:()[Ljava/lang/Object;
   155:	pop
   156]:	return

public tup...> but was:<...
   108:	if_icmpge	1[44
   111:	aload_3
   112:	iload	5
   114:	aaload
   115:	astore	4
   117:	aload	4
   119:	invokevirtual	; //Method scala/Tuple2._1$mcI$sp:()I
   122:	bipush	30
   124:	if_icmpge	135
   127:	aload	6
   129:	aload	4
   131:	invokevirtual	; //Method scala/collection/mutable/ArrayBuilder$ofRef.$plus$eq:(Ljava/lang/Object;)Lscala/collection/mutable/ArrayBuilder$ofRef;
   134:	pop
   135:	iload	5
   137:	iconst_1
   138:	iadd
   139:	istore	5
   141:	goto	105
   144:	aload	6
   146:	invokevirtual	; //Method scala/collection/mutable/ArrayBuilder$ofRef.result:()[Ljava/lang/Object;
   149:	pop
   150]:	return

public tup...>
  simpleFoldRight(com.nativelibs4java.scalace.test.Fold2WhileTest): expected:<...  4:	astore_1
   5:	[aload_1
   6:	astore_2
   7:	aload_2
   8:	arraylength
   9:	istore_3
   10:	iload_3
   11:	istore	4
   13:	iload	4
   15:	iconst_0
   16:	if_icmple	28
   19:	iload	4
   21:	iconst_1
   22:	isub
   23:	istore	4
   25:	goto	13
   28]:	return

public sim...> but was:<...  4:	astore_1
   5:	[getstatic	; //Field scala/Predef$.MODULE$:Lscala/Predef$;
   8:	aload_1
   9:	invokevirtual	; //Method scala/Predef$.doubleArrayOps:([D)Lscala/collection/mutable/ArrayOps;
   12:	dconst_0
   13:	invokestatic	; //Method scala/runtime/BoxesRunTime.boxToDouble:(D)Ljava/lang/Double;
   16:	new	; //class simpleFoldRight$$anonfun$1
   19:	dup
   20:	aload_0
   21:	invokespecial	; //Method simpleFoldRight$$anonfun$1."<init>":(LsimpleFoldRight;)V
   24:	invokeinterface	,  3; //InterfaceMethod scala/collection/IndexedSeqOptimized.foldRight:(Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
   29:	pop
   30]:	return

public sim...>
  simpleRangeFilter(com.nativelibs4java.scalace.test.IntRangeForeach2WhileTest): expected:<...0
   13:	if_icmpge	4[6
   16:	iload_2
   17:	istore_1
   18:	iload_1
   19:	bipush	50
   21:	if_icmpeq	35
   24:	aload_3
   25:	iload_1
   26:	invokestatic	; //Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
   29:	invokevirtual	; //Method scala/collection/immutable/VectorBuilder.$plus$eq:(Ljava/lang/Object;)Lscala/collection/immutable/VectorBuilder;
   32:	goto	38
   35:	getstatic	; //Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
   38:	pop
   39:	iload_2
   40:	iconst_1
   41:	iadd
   42:	istore_2
   43:	goto	10
   46:	aload_3
   47:	invokevirtual	; //Method scala/collection/immutable/VectorBuilder.result:()Lscala/collection/immutable/Vector;
   50:	pop
   51]:	return

public sim...> but was:<...0
   13:	if_icmpge	4[0
   16:	iload_2
   17:	istore_1
   18:	iload_1
   19:	bipush	50
   21:	if_icmpeq	33
   24:	aload_3
   25:	iload_1
   26:	invokestatic	; //Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
   29:	invokevirtual	; //Method scala/collection/immutable/VectorBuilder.$plus$eq:(Ljava/lang/Object;)Lscala/collection/immutable/VectorBuilder;
   32:	pop
   33:	iload_2
   34:	iconst_1
   35:	iadd
   36:	istore_2
   37:	goto	10
   40:	aload_3
   41:	invokevirtual	; //Method scala/collection/immutable/VectorBuilder.result:()Lscala/collection/immutable/Vector;
   44:	pop
   45]:	return

public sim...>
  simpleForall(com.nativelibs4java.scalace.test.ListChainedPerformanceTest): ERROR: only 0.6036036036036037x faster (expected >= 0.95x)
  simpleFilter(com.nativelibs4java.scalace.test.ListChainedPerformanceTest): ERROR: only 0.9446494464944649x faster (expected >= 0.95x)
  simpleTakeWhile(com.nativelibs4java.scalace.test.ListChainedPerformanceTest): ERROR: only 0.5862068965517241x faster (expected >= 0.95x)
ERROR: only 0.923469387755102x faster (expected >= 0.95x)
  simpleDropWhile(com.nativelibs4java.scalace.test.ListChainedPerformanceTest): ERROR: only 0.9033333333333333x faster (expected >= 0.95x)
  simpleForall(com.nativelibs4java.scalace.test.ListPerformanceTest): ERROR: only 0.9352941176470588x faster (expected >= 0.95x)
ERROR: only 0.9442573887018332x faster (expected >= 0.95x)
  simpleExists(com.nativelibs4java.scalace.test.ListPerformanceTest): ERROR: only 0.9490254872563718x faster (expected >= 0.95x)
  simpleToArray(com.nativelibs4java.scalace.test.ListPerformanceTest): ERROR: only 0.6779661016949152x faster (expected >= 0.95x)
ERROR: only 0.8641304347826086x faster (expected >= 0.95x)
ERROR: only 0.9244712990936556x faster (expected >= 0.95x)
ERROR: only 0.9046153846153846x faster (expected >= 0.95x)
ERROR: only 0.92644666511736x faster (expected >= 0.95x)
  simpleFilter(com.nativelibs4java.scalace.test.ListPerformanceTest): ERROR: only 0.9135802469135802x faster (expected >= 0.95x)
ERROR: only 0.9477064220183486x faster (expected >= 0.95x)
ERROR: only 0.8985074626865671x faster (expected >= 0.95x)
ERROR: only 0.926497277676951x faster (expected >= 0.95x)
  simpleFilterNot(com.nativelibs4java.scalace.test.ListPerformanceTest): ERROR: only 0.8417508417508418x faster (expected >= 0.95x)
ERROR: only 0.9302325581395349x faster (expected >= 0.95x)
ERROR: only 0.8885448916408669x faster (expected >= 0.95x)
  simpleCount(com.nativelibs4java.scalace.test.ListPerformanceTest): ERROR: only 0.5024711696869851x faster (expected >= 0.95x)
ERROR: only 0.8941176470588236x faster (expected >= 0.95x)
ERROR: only 0.9387071851661086x faster (expected >= 0.95x)
  simpleTakeWhile(com.nativelibs4java.scalace.test.ListPerformanceTest): ERROR: only 0.9457831325301205x faster (expected >= 0.95x)
  simpleDropWhile(com.nativelibs4java.scalace.test.ListPerformanceTest): ERROR: only 0.9202453987730062x faster (expected >= 0.95x)
ERROR: only 0.9308250048990789x faster (expected >= 0.95x)
  simpleForeach(com.nativelibs4java.scalace.test.ListPerformanceTest): ERROR: only 0.836873406966865x faster (expected >= 0.95x)
  simpleMap(com.nativelibs4java.scalace.test.ListPerformanceTest): ERROR: only 0.9016393442622951x faster (expected >= 0.95x)
  simpleProduct(com.nativelibs4java.scalace.test.ListPerformanceTest): ERROR: only 0.9365898617511521x faster (expected >= 0.95x)
  simpleMin(com.nativelibs4java.scalace.test.ListPerformanceTest): ERROR: only 0.9162303664921466x faster (expected >= 0.95x)
ERROR: only 0.9461538461538461x faster (expected >= 0.95x)
  simpleMax(com.nativelibs4java.scalace.test.ListPerformanceTest): ERROR: only 0.9212121212121213x faster (expected >= 0.95x)
ERROR: only 0.8673469387755102x faster (expected >= 0.95x)
  simpleScanLeft(com.nativelibs4java.scalace.test.ListPerformanceTest): ERROR: only 0.8422619047619048x faster (expected >= 0.95x)
ERROR: only 0.9426229508196722x faster (expected >= 0.95x)
ERROR: only 0.38989774330042315x faster (expected >= 0.95x)
  simpleFoldLeft(com.nativelibs4java.scalace.test.ListPerformanceTest): ERROR: only 0.927710843373494x faster (expected >= 0.95x)
ERROR: only 0.8653730142770963x faster (expected >= 0.95x)
  simpleReduceLeft(com.nativelibs4java.scalace.test.ListPerformanceTest): ERROR: only 0.9392265193370166x faster (expected >= 0.95x)
ERROR: only 0.9027237354085603x faster (expected >= 0.95x)
  simpleReduceRight(com.nativelibs4java.scalace.test.Reduce2WhileTest): expected:<...  4:	astore_1
   5:	[aload_1
   6:	astore_2
   7:	aload_2
   8:	arraylength
   9:	istore_3
   10:	iload_3
   11:	istore	4
   13:	iconst_0
   14:	istore	5
   16:	iload	4
   18:	iconst_0
   19:	if_icmple	42
   22:	iload	4
   24:	iconst_1
   25:	isub
   26:	istore	4
   28:	iload	5
   30:	ifeq	36
   33:	goto	16
   36:	iconst_1
   37:	istore	5
   39:	goto	16
   42:	iload	5
   44:	ifeq	48
   47:	return
   48:	new	; //class java/lang/ArrayIndexOutOfBoundsException
   51:	dup
   52:	iconst_0
   53:	invokespecial	; //Method java/lang/ArrayIndexOutOfBoundsException."<init>":(I)V
   56:	athrow]

public simpleReduc...> but was:<...  4:	astore_1
   5:	[getstatic	; //Field scala/Predef$.MODULE$:Lscala/Predef$;
   8:	aload_1
   9:	invokevirtual	; //Method scala/Predef$.doubleArrayOps:([D)Lscala/collection/mutable/ArrayOps;
   12:	new	; //class simpleReduceRight$$anonfun$1
   15:	dup
   16:	aload_0
   17:	invokespecial	; //Method simpleReduceRight$$anonfun$1."<init>":(LsimpleReduceRight;)V
   20:	invokeinterface	,  2; //InterfaceMethod scala/collection/IndexedSeqOptimized.reduceRight:(Lscala/Function2;)Ljava/lang/Object;
   25:	pop
   26:	return]

public simpleReduc...>
  simpleSideEffectAssignment(com.nativelibs4java.scalace.test.SideEffectsTest): Failed to analyze side-effects ! Side effects = 
	testOutputs = Map() expected:<false> but was:<true>
  simpleMethodCall(com.nativelibs4java.scalace.test.SideEffectsTest): Failed to analyze side-effects ! Side effects = 
	testOutputs = Map() expected:<false> but was:<true>

Tests run: 170, Failures: 35, Errors: 0, Skipped: 0

Wrote com.nativelibs4java.scalace.test.RangeChainedPerformanceTest.perf.properties
Wrote com.nativelibs4java.scalace.test.MatrixPerformanceTest.perf.properties
Wrote com.nativelibs4java.scalace.test.RangePerformanceTest.perf.properties
Wrote com.nativelibs4java.scalace.test.ListPerformanceTest.perf.properties
Wrote com.nativelibs4java.scalace.test.ArrayPerformanceTest.perf.properties
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 24:27.249s
[INFO] Finished at: Mon Jan 02 20:48:06 GMT 2012
[INFO] Final Memory: 11M/1078M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.7.2:test (default-test) on project scalace: There are test failures.
[ERROR] 
[ERROR] Please refer to /Users/ochafik/github/nativelibs4java/libraries/Scalace/target/surefire-reports for the individual test results.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException

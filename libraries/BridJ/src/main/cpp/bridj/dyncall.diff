Index: dyncall/dynload/dynload_syms_mach-o.c
===================================================================
--- dyncall/dynload/dynload_syms_mach-o.c	(revision 1354)
+++ dyncall/dynload/dynload_syms_mach-o.c	(working copy)
@@ -28,6 +28,7 @@
  dynamic symbol resolver for Mach-O
 
 */
+#include "../autovar/autovar_ARCH.h"
 
 #include "dynload.h"
 #include "dynload_alloc.h"
@@ -62,7 +63,18 @@
 	uint32_t symbolCount;
 };
 
-
+int isSameMacImageName(const char* libPath, const char* systemLibPath) {
+	if (!libPath || !systemLibPath)
+		return 0;
+	
+	if (!strcmp(libPath, systemLibPath))
+		return 1;
+	
+	if (strstr(libPath, "/libc.") && strstr(systemLibPath, "/libSystem."))
+		return 1;
+	
+	return 0;
+}
 DLSyms* dlSymsInit(const char* libPath) 
 {
 	DLSyms* pSyms = NULL;
@@ -70,16 +82,19 @@
 	for (iImage = 0, nImages = _dyld_image_count(); iImage < nImages; iImage++)
 	{
 		const char* name = _dyld_get_image_name(iImage);
-		if (name && !strcmp(name, libPath))
+		if (isSameMacImageName(libPath, name))
 		{
 			const struct MACH_HEADER_TYPE* pHeader = (const struct MACH_HEADER_TYPE*) _dyld_get_image_header(iImage);
 			const char* pBase = ((const char*)pHeader);
+			if (!pHeader)
+				return NULL;
+
 			if (pHeader->filetype != MH_DYLIB)
 				return NULL;
+			
 			if (pHeader->flags & MH_SPLIT_SEGS)
 				return NULL;
-
-			if (pHeader)
+			
 			{
 				uint32_t iCmd, nCmds = pHeader->ncmds;
 				const struct load_command* cmd = (const struct load_command*)(pBase + sizeof(struct MACH_HEADER_TYPE));
@@ -100,7 +115,6 @@
 					cmd = (const struct load_command*)(((char*)cmd) + cmd->cmdsize);
 				}
 			}
-			break;
 		}
 	}
 	return NULL;
Index: dyncall/dynload/dynload_unix.c
===================================================================
--- dyncall/dynload/dynload_unix.c	(revision 1354)
+++ dyncall/dynload/dynload_unix.c	(working copy)
@@ -40,7 +40,7 @@
 
 DLLib* dlLoadLibrary(const char* libPath)
 {
-  return (DLLib*)dlopen(libPath,RTLD_NOW|RTLD_GLOBAL);
+  return (DLLib*)dlopen(libPath,RTLD_LAZY|RTLD_GLOBAL);
 }
 
 
Index: dyncall/buildsys/gmake/os/darwin.gmake
===================================================================
--- dyncall/buildsys/gmake/os/darwin.gmake	(revision 1354)
+++ dyncall/buildsys/gmake/os/darwin.gmake	(working copy)
@@ -23,7 +23,8 @@
 LIBTOOL_STATIC=libtool -static -o $@ $^
 
 ifdef BUILD_ARCH_universal
-TARGET_ARCH?=-arch i386 -arch ppc -arch x86_64
+#TARGET_ARCH?=-arch i386 -arch ppc -arch x86_64
+TARGET_ARCH?=-arch i386 -arch x86_64
 endif
 
 ifdef BUILD_ARCH_ppc32
Index: dyncall/buildsys/gmake/tool/gcc.gmake
===================================================================
--- dyncall/buildsys/gmake/tool/gcc.gmake	(revision 1354)
+++ dyncall/buildsys/gmake/tool/gcc.gmake	(working copy)
@@ -86,6 +86,13 @@
 
 #	$(CC) -MM -MT $@ $(CPPFLAGS) $(CFLAGS) $< > $(BUILD_DIR)/$*.d
 
+# --- Compile Objective-C ---------------------------------------------------------------
+
+$(BUILD_DIR)/%.o: %.m
+	$(COMPILE.c) $< $(OUTPUT_OPTION)
+
+#	$(CC) -MM -MT $@ $(CPPFLAGS) $(CFLAGS) $< > $(BUILD_DIR)/$*.d
+
 # --- Compile C++ -------------------------------------------------------------
 
 $(BUILD_DIR)/%.o: %.cpp
